//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Wed Oct  9 23:41:48 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_get_inp                    O     1
// send_out                       O    32 reg
// RDY_send_out                   O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// get_inp_a                      I     8
// get_inp_b                      I     8
// get_inp_c                      I    32 reg
// EN_get_inp                     I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMult(CLK,
	      RST_N,

	      get_inp_a,
	      get_inp_b,
	      get_inp_c,
	      EN_get_inp,
	      RDY_get_inp,

	      send_out,
	      RDY_send_out);
  input  CLK;
  input  RST_N;

  // action method get_inp
  input  [7 : 0] get_inp_a;
  input  [7 : 0] get_inp_b;
  input  [31 : 0] get_inp_c;
  input  EN_get_inp;
  output RDY_get_inp;

  // value method send_out
  output [31 : 0] send_out;
  output RDY_send_out;

  // signals for module outputs
  wire [31 : 0] send_out;
  wire RDY_get_inp, RDY_send_out;

  // register inp_A
  reg [15 : 0] inp_A;
  wire [15 : 0] inp_A_D_IN;
  wire inp_A_EN;

  // register inp_B
  reg [15 : 0] inp_B;
  wire [15 : 0] inp_B_D_IN;
  wire inp_B_EN;

  // register inp_C
  reg [31 : 0] inp_C;
  wire [31 : 0] inp_C_D_IN;
  wire inp_C_EN;

  // register result
  reg [31 : 0] result;
  wire [31 : 0] result_D_IN;
  wire result_EN;

  // register state
  reg [1 : 0] state;
  wire [1 : 0] state_D_IN;
  wire state_EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_compute,
       CAN_FIRE_get_inp,
       WILL_FIRE_RL_rl_compute,
       WILL_FIRE_get_inp;

  // remaining internal signals
  wire [31 : 0] product_temp__h239;
  wire [15 : 0] IF_inp_B_BITS_15_TO_11_42_EQ_0_43_THEN_IF_inp__ETC___d1003,
		IF_inp_B_BITS_15_TO_13_28_EQ_0_29_THEN_IF_inp__ETC___d1001,
		IF_inp_B_BITS_15_TO_1_EQ_0_THEN_IF_inp_B_BIT_0_ETC___d1013,
		IF_inp_B_BITS_15_TO_3_50_EQ_0_51_THEN_IF_inp_B_ETC___d1011,
		IF_inp_B_BITS_15_TO_5_74_EQ_0_75_THEN_IF_inp_B_ETC___d1009,
		IF_inp_B_BITS_15_TO_7_65_EQ_0_66_THEN_IF_inp_B_ETC___d1007,
		IF_inp_B_BITS_15_TO_9_21_EQ_0_22_THEN_IF_inp_B_ETC___d1005,
		IF_inp_B_BIT_0_THEN_inp_A_ELSE_0___d9,
		IF_inp_B_BIT_10_44_THEN_IF_inp_B_BIT_9_87_THEN_ETC___d889,
		IF_inp_B_BIT_11_92_THEN_IF_inp_B_BIT_10_44_THE_ETC___d927,
		IF_inp_B_BIT_12_30_THEN_IF_inp_B_BIT_11_92_THE_ETC___d957,
		IF_inp_B_BIT_13_60_THEN_IF_inp_B_BIT_12_30_THE_ETC___d980,
		IF_inp_B_BIT_14_82_THEN_IF_inp_B_BIT_13_60_THE_ETC___d993,
		IF_inp_B_BIT_15_81_THEN_IF_inp_B_BIT_15_81_THE_ETC___d999,
		IF_inp_B_BIT_1_2_THEN_IF_inp_B_BIT_0_THEN_inp__ETC___d149,
		IF_inp_B_BIT_2_52_THEN_IF_inp_B_BIT_1_2_THEN_I_ETC___d265,
		IF_inp_B_BIT_3_68_THEN_IF_inp_B_BIT_2_52_THEN__ETC___d373,
		IF_inp_B_BIT_4_76_THEN_IF_inp_B_BIT_3_68_THEN__ETC___d472,
		IF_inp_B_BIT_5_75_THEN_IF_inp_B_BIT_4_76_THEN__ETC___d564,
		IF_inp_B_BIT_6_67_THEN_IF_inp_B_BIT_5_75_THEN__ETC___d647,
		IF_inp_B_BIT_7_50_THEN_IF_inp_B_BIT_6_67_THEN__ETC___d720,
		IF_inp_B_BIT_8_23_THEN_IF_inp_B_BIT_7_50_THEN__ETC___d784,
		IF_inp_B_BIT_9_87_THEN_IF_inp_B_BIT_8_23_THEN__ETC___d841,
		product__h1062,
		product__h1449,
		product__h1836,
		product__h2223,
		product__h2610,
		product__h2997,
		product__h3384,
		product__h3771,
		product__h4158,
		product__h4545,
		product__h4932,
		product__h5319,
		product__h5706,
		product__h6093,
		product__h671,
		x__h243;
  wire [3 : 0] spliced_bits__h1079,
	       spliced_bits__h1466,
	       spliced_bits__h1853,
	       spliced_bits__h2240,
	       spliced_bits__h2627,
	       spliced_bits__h2657,
	       spliced_bits__h3014,
	       spliced_bits__h3044,
	       spliced_bits__h3401,
	       spliced_bits__h3431,
	       spliced_bits__h3788,
	       spliced_bits__h3818,
	       spliced_bits__h4175,
	       spliced_bits__h4205,
	       spliced_bits__h4235,
	       spliced_bits__h4562,
	       spliced_bits__h4592,
	       spliced_bits__h4622,
	       spliced_bits__h4949,
	       spliced_bits__h4979,
	       spliced_bits__h5009,
	       spliced_bits__h5336,
	       spliced_bits__h5366,
	       spliced_bits__h5396,
	       spliced_bits__h5426,
	       spliced_bits__h5723,
	       spliced_bits__h5753,
	       spliced_bits__h5783,
	       spliced_bits__h5813,
	       spliced_bits__h6110,
	       spliced_bits__h6140,
	       spliced_bits__h6170,
	       spliced_bits__h6200;
  wire carry__h10534,
       carry__h10537,
       carry__h10540,
       carry__h11221,
       carry__h11224,
       carry__h11227,
       carry__h12360,
       carry__h12363,
       carry__h12366,
       carry__h13048,
       carry__h13051,
       carry__h13054,
       carry__h13735,
       carry__h13738,
       carry__h13741,
       carry__h14874,
       carry__h14877,
       carry__h14880,
       carry__h15562,
       carry__h15565,
       carry__h15568,
       carry__h16249,
       carry__h16252,
       carry__h16255,
       carry__h17388,
       carry__h17391,
       carry__h17394,
       carry__h18076,
       carry__h18079,
       carry__h18082,
       carry__h18763,
       carry__h18766,
       carry__h18769,
       carry__h19905,
       carry__h19908,
       carry__h20590,
       carry__h20593,
       carry__h20596,
       carry__h21277,
       carry__h21280,
       carry__h21283,
       carry__h2234,
       carry__h22422,
       carry__h23104,
       carry__h23107,
       carry__h23110,
       carry__h23791,
       carry__h23794,
       carry__h23797,
       carry__h25618,
       carry__h25621,
       carry__h25624,
       carry__h2621,
       carry__h26305,
       carry__h26308,
       carry__h26311,
       carry__h28132,
       carry__h28135,
       carry__h28138,
       carry__h28819,
       carry__h28822,
       carry__h28825,
       carry__h3008,
       carry__h30649,
       carry__h30652,
       carry__h31333,
       carry__h31336,
       carry__h31339,
       carry__h33166,
       carry__h33847,
       carry__h33850,
       carry__h33853,
       carry__h3395,
       carry__h36361,
       carry__h36364,
       carry__h36367,
       carry__h3780,
       carry__h3782,
       carry__h38875,
       carry__h38878,
       carry__h38881,
       carry__h41392,
       carry__h41395,
       carry__h4167,
       carry__h4169,
       carry__h43909,
       carry__h4554,
       carry__h4556,
       carry__h4941,
       carry__h4943,
       carry__h5326,
       carry__h5328,
       carry__h5330,
       carry__h5713,
       carry__h5715,
       carry__h5717,
       carry__h5898,
       carry__h6100,
       carry__h6102,
       carry__h6104,
       carry__h6282,
       carry__h6285,
       carry__h9846,
       carry__h9849,
       carry__h9852,
       x__h10105,
       x__h10188,
       x__h10271,
       x__h10345,
       x__h10347,
       x__h10360,
       x__h10362,
       x__h10375,
       x__h10377,
       x__h10390,
       x__h10392,
       x__h10667,
       x__h10793,
       x__h10876,
       x__h10959,
       x__h11033,
       x__h11035,
       x__h11048,
       x__h11050,
       x__h11063,
       x__h11065,
       x__h11078,
       x__h11080,
       x__h11354,
       x__h11480,
       x__h11563,
       x__h11646,
       x__h11720,
       x__h11722,
       x__h11735,
       x__h11737,
       x__h11750,
       x__h11752,
       x__h11954,
       x__h12219,
       x__h12221,
       x__h12493,
       x__h12619,
       x__h12702,
       x__h12785,
       x__h12859,
       x__h12861,
       x__h12874,
       x__h12876,
       x__h12889,
       x__h12891,
       x__h12904,
       x__h12906,
       x__h13181,
       x__h13307,
       x__h13390,
       x__h13473,
       x__h13547,
       x__h13549,
       x__h13562,
       x__h13564,
       x__h13577,
       x__h13579,
       x__h13592,
       x__h13594,
       x__h13868,
       x__h13994,
       x__h14077,
       x__h14160,
       x__h14234,
       x__h14236,
       x__h14249,
       x__h14251,
       x__h14264,
       x__h14266,
       x__h15007,
       x__h15133,
       x__h15216,
       x__h15299,
       x__h15373,
       x__h15375,
       x__h15388,
       x__h15390,
       x__h15403,
       x__h15405,
       x__h15418,
       x__h15420,
       x__h15695,
       x__h15821,
       x__h15904,
       x__h15987,
       x__h16061,
       x__h16063,
       x__h16076,
       x__h16078,
       x__h16091,
       x__h16093,
       x__h16106,
       x__h16108,
       x__h16382,
       x__h16508,
       x__h16591,
       x__h16674,
       x__h16748,
       x__h16750,
       x__h16763,
       x__h16765,
       x__h16778,
       x__h16780,
       x__h17521,
       x__h17647,
       x__h17730,
       x__h17813,
       x__h17902,
       x__h17904,
       x__h17917,
       x__h17919,
       x__h17932,
       x__h17934,
       x__h18209,
       x__h18335,
       x__h18418,
       x__h18501,
       x__h18575,
       x__h18577,
       x__h18590,
       x__h18592,
       x__h18605,
       x__h18607,
       x__h18620,
       x__h18622,
       x__h18896,
       x__h19022,
       x__h19105,
       x__h19188,
       x__h19262,
       x__h19264,
       x__h19277,
       x__h19279,
       x__h19292,
       x__h19294,
       x__h20035,
       x__h20161,
       x__h20244,
       x__h20431,
       x__h20433,
       x__h20446,
       x__h20448,
       x__h20723,
       x__h20849,
       x__h20932,
       x__h21015,
       x__h21089,
       x__h21091,
       x__h21104,
       x__h21106,
       x__h21119,
       x__h21121,
       x__h21134,
       x__h21136,
       x__h21410,
       x__h21536,
       x__h21619,
       x__h21702,
       x__h21776,
       x__h21778,
       x__h21791,
       x__h21793,
       x__h21806,
       x__h21808,
       x__h22549,
       x__h22675,
       x__h22960,
       x__h22962,
       x__h23237,
       x__h23363,
       x__h23446,
       x__h23529,
       x__h23603,
       x__h23605,
       x__h23618,
       x__h23620,
       x__h23633,
       x__h23635,
       x__h23648,
       x__h23650,
       x__h23924,
       x__h24050,
       x__h24133,
       x__h24216,
       x__h24290,
       x__h24292,
       x__h24305,
       x__h24307,
       x__h24320,
       x__h24322,
       x__h25063,
       x__h25751,
       x__h25877,
       x__h25960,
       x__h26043,
       x__h26117,
       x__h26119,
       x__h26132,
       x__h26134,
       x__h26147,
       x__h26149,
       x__h26162,
       x__h26164,
       x__h26438,
       x__h26564,
       x__h26647,
       x__h26730,
       x__h26804,
       x__h26806,
       x__h26819,
       x__h26821,
       x__h26834,
       x__h26836,
       x__h28265,
       x__h28391,
       x__h28474,
       x__h28557,
       x__h28646,
       x__h28648,
       x__h28661,
       x__h28663,
       x__h28676,
       x__h28678,
       x__h28952,
       x__h29078,
       x__h29161,
       x__h29244,
       x__h29318,
       x__h29320,
       x__h29333,
       x__h29335,
       x__h29348,
       x__h29350,
       x__h30779,
       x__h30905,
       x__h30988,
       x__h31175,
       x__h31177,
       x__h31190,
       x__h31192,
       x__h31466,
       x__h31592,
       x__h31675,
       x__h31758,
       x__h31832,
       x__h31834,
       x__h31847,
       x__h31849,
       x__h31862,
       x__h31864,
       x__h33293,
       x__h33419,
       x__h33704,
       x__h33706,
       x__h33980,
       x__h34106,
       x__h34189,
       x__h34272,
       x__h34346,
       x__h34348,
       x__h34361,
       x__h34363,
       x__h34376,
       x__h34378,
       x__h35807,
       x__h36494,
       x__h36620,
       x__h36703,
       x__h36786,
       x__h36860,
       x__h36862,
       x__h36875,
       x__h36877,
       x__h36890,
       x__h36892,
       x__h39008,
       x__h39134,
       x__h39217,
       x__h39300,
       x__h39389,
       x__h39391,
       x__h39404,
       x__h39406,
       x__h41522,
       x__h41648,
       x__h41731,
       x__h41918,
       x__h41920,
       x__h44036,
       x__h44162,
       x__h46550,
       x__h5638,
       x__h6025,
       x__h6412,
       x__h9440,
       x__h9690,
       x__h9692,
       x__h9705,
       x__h9707,
       x__h9979,
       y__h10346,
       y__h10348,
       y__h10361,
       y__h10363,
       y__h10376,
       y__h10378,
       y__h10391,
       y__h10393,
       y__h11034,
       y__h11036,
       y__h11049,
       y__h11051,
       y__h11064,
       y__h11066,
       y__h11079,
       y__h11081,
       y__h11721,
       y__h11723,
       y__h11736,
       y__h11738,
       y__h11751,
       y__h11753,
       y__h12220,
       y__h12222,
       y__h12860,
       y__h12862,
       y__h12875,
       y__h12877,
       y__h12890,
       y__h12892,
       y__h12905,
       y__h12907,
       y__h13548,
       y__h13550,
       y__h13563,
       y__h13565,
       y__h13578,
       y__h13580,
       y__h13593,
       y__h13595,
       y__h14235,
       y__h14237,
       y__h14250,
       y__h14252,
       y__h14265,
       y__h14267,
       y__h15374,
       y__h15376,
       y__h15389,
       y__h15391,
       y__h15404,
       y__h15406,
       y__h15419,
       y__h15421,
       y__h16062,
       y__h16064,
       y__h16077,
       y__h16079,
       y__h16092,
       y__h16094,
       y__h16107,
       y__h16109,
       y__h16749,
       y__h16751,
       y__h16764,
       y__h16766,
       y__h16779,
       y__h16781,
       y__h17903,
       y__h17905,
       y__h17918,
       y__h17920,
       y__h17933,
       y__h17935,
       y__h18576,
       y__h18578,
       y__h18591,
       y__h18593,
       y__h18606,
       y__h18608,
       y__h18621,
       y__h18623,
       y__h19263,
       y__h19265,
       y__h19278,
       y__h19280,
       y__h19293,
       y__h19295,
       y__h20432,
       y__h20434,
       y__h20447,
       y__h20449,
       y__h21090,
       y__h21092,
       y__h21105,
       y__h21107,
       y__h21120,
       y__h21122,
       y__h21135,
       y__h21137,
       y__h21777,
       y__h21779,
       y__h21792,
       y__h21794,
       y__h21807,
       y__h21809,
       y__h22961,
       y__h22963,
       y__h23604,
       y__h23606,
       y__h23619,
       y__h23621,
       y__h23634,
       y__h23636,
       y__h23649,
       y__h23651,
       y__h24291,
       y__h24293,
       y__h24306,
       y__h24308,
       y__h24321,
       y__h24323,
       y__h26118,
       y__h26120,
       y__h26133,
       y__h26135,
       y__h26148,
       y__h26150,
       y__h26163,
       y__h26165,
       y__h26805,
       y__h26807,
       y__h26820,
       y__h26822,
       y__h26835,
       y__h26837,
       y__h28647,
       y__h28649,
       y__h28662,
       y__h28664,
       y__h28677,
       y__h28679,
       y__h29319,
       y__h29321,
       y__h29334,
       y__h29336,
       y__h29349,
       y__h29351,
       y__h31176,
       y__h31178,
       y__h31191,
       y__h31193,
       y__h31833,
       y__h31835,
       y__h31848,
       y__h31850,
       y__h31863,
       y__h31865,
       y__h33705,
       y__h33707,
       y__h34347,
       y__h34349,
       y__h34362,
       y__h34364,
       y__h34377,
       y__h34379,
       y__h36861,
       y__h36863,
       y__h36876,
       y__h36878,
       y__h36891,
       y__h36893,
       y__h39390,
       y__h39392,
       y__h39405,
       y__h39407,
       y__h41919,
       y__h41921,
       y__h9691,
       y__h9693,
       y__h9706,
       y__h9708;

  // action method get_inp
  assign RDY_get_inp = state == 2'd0 ;
  assign CAN_FIRE_get_inp = state == 2'd0 ;
  assign WILL_FIRE_get_inp = EN_get_inp ;

  // value method send_out
  assign send_out = result ;
  assign RDY_send_out = state == 2'd2 ;

  // rule RL_rl_compute
  assign CAN_FIRE_RL_rl_compute = state == 2'd1 ;
  assign WILL_FIRE_RL_rl_compute = CAN_FIRE_RL_rl_compute ;

  // register inp_A
  assign inp_A_D_IN = { {8{get_inp_a[7]}}, get_inp_a } ;
  assign inp_A_EN = EN_get_inp ;

  // register inp_B
  assign inp_B_D_IN = { {8{get_inp_b[7]}}, get_inp_b } ;
  assign inp_B_EN = EN_get_inp ;

  // register inp_C
  assign inp_C_D_IN = get_inp_c ;
  assign inp_C_EN = EN_get_inp ;

  // register result
  assign result_D_IN = product_temp__h239 + inp_C ;
  assign result_EN = CAN_FIRE_RL_rl_compute ;

  // register state
  assign state_D_IN = EN_get_inp ? 2'd1 : 2'd2 ;
  assign state_EN = EN_get_inp || WILL_FIRE_RL_rl_compute ;

  // remaining internal signals
  assign IF_inp_B_BITS_15_TO_11_42_EQ_0_43_THEN_IF_inp__ETC___d1003 =
	     (inp_B[15:11] == 5'd0) ?
	       IF_inp_B_BIT_10_44_THEN_IF_inp_B_BIT_9_87_THEN_ETC___d889 :
	       ((inp_B[15:12] == 4'd0) ?
		  IF_inp_B_BIT_11_92_THEN_IF_inp_B_BIT_10_44_THE_ETC___d927 :
		  IF_inp_B_BITS_15_TO_13_28_EQ_0_29_THEN_IF_inp__ETC___d1001) ;
  assign IF_inp_B_BITS_15_TO_13_28_EQ_0_29_THEN_IF_inp__ETC___d1001 =
	     (inp_B[15:13] == 3'd0) ?
	       IF_inp_B_BIT_12_30_THEN_IF_inp_B_BIT_11_92_THE_ETC___d957 :
	       ((inp_B[15:14] == 2'd0) ?
		  IF_inp_B_BIT_13_60_THEN_IF_inp_B_BIT_12_30_THE_ETC___d980 :
		  IF_inp_B_BIT_15_81_THEN_IF_inp_B_BIT_15_81_THE_ETC___d999) ;
  assign IF_inp_B_BITS_15_TO_1_EQ_0_THEN_IF_inp_B_BIT_0_ETC___d1013 =
	     (inp_B[15:1] == 15'd0) ?
	       IF_inp_B_BIT_0_THEN_inp_A_ELSE_0___d9 :
	       ((inp_B[15:2] == 14'd0) ?
		  IF_inp_B_BIT_1_2_THEN_IF_inp_B_BIT_0_THEN_inp__ETC___d149 :
		  IF_inp_B_BITS_15_TO_3_50_EQ_0_51_THEN_IF_inp_B_ETC___d1011) ;
  assign IF_inp_B_BITS_15_TO_3_50_EQ_0_51_THEN_IF_inp_B_ETC___d1011 =
	     (inp_B[15:3] == 13'd0) ?
	       IF_inp_B_BIT_2_52_THEN_IF_inp_B_BIT_1_2_THEN_I_ETC___d265 :
	       ((inp_B[15:4] == 12'd0) ?
		  IF_inp_B_BIT_3_68_THEN_IF_inp_B_BIT_2_52_THEN__ETC___d373 :
		  IF_inp_B_BITS_15_TO_5_74_EQ_0_75_THEN_IF_inp_B_ETC___d1009) ;
  assign IF_inp_B_BITS_15_TO_5_74_EQ_0_75_THEN_IF_inp_B_ETC___d1009 =
	     (inp_B[15:5] == 11'd0) ?
	       IF_inp_B_BIT_4_76_THEN_IF_inp_B_BIT_3_68_THEN__ETC___d472 :
	       ((inp_B[15:6] == 10'd0) ?
		  IF_inp_B_BIT_5_75_THEN_IF_inp_B_BIT_4_76_THEN__ETC___d564 :
		  IF_inp_B_BITS_15_TO_7_65_EQ_0_66_THEN_IF_inp_B_ETC___d1007) ;
  assign IF_inp_B_BITS_15_TO_7_65_EQ_0_66_THEN_IF_inp_B_ETC___d1007 =
	     (inp_B[15:7] == 9'd0) ?
	       IF_inp_B_BIT_6_67_THEN_IF_inp_B_BIT_5_75_THEN__ETC___d647 :
	       ((inp_B[15:8] == 8'd0) ?
		  IF_inp_B_BIT_7_50_THEN_IF_inp_B_BIT_6_67_THEN__ETC___d720 :
		  IF_inp_B_BITS_15_TO_9_21_EQ_0_22_THEN_IF_inp_B_ETC___d1005) ;
  assign IF_inp_B_BITS_15_TO_9_21_EQ_0_22_THEN_IF_inp_B_ETC___d1005 =
	     (inp_B[15:9] == 7'd0) ?
	       IF_inp_B_BIT_8_23_THEN_IF_inp_B_BIT_7_50_THEN__ETC___d784 :
	       ((inp_B[15:10] == 6'd0) ?
		  IF_inp_B_BIT_9_87_THEN_IF_inp_B_BIT_8_23_THEN__ETC___d841 :
		  IF_inp_B_BITS_15_TO_11_42_EQ_0_43_THEN_IF_inp__ETC___d1003) ;
  assign IF_inp_B_BIT_0_THEN_inp_A_ELSE_0___d9 = inp_B[0] ? inp_A : 16'd0 ;
  assign IF_inp_B_BIT_10_44_THEN_IF_inp_B_BIT_9_87_THEN_ETC___d889 =
	     inp_B[10] ?
	       product__h2610 :
	       IF_inp_B_BIT_9_87_THEN_IF_inp_B_BIT_8_23_THEN__ETC___d841 ;
  assign IF_inp_B_BIT_11_92_THEN_IF_inp_B_BIT_10_44_THE_ETC___d927 =
	     inp_B[11] ?
	       product__h2223 :
	       IF_inp_B_BIT_10_44_THEN_IF_inp_B_BIT_9_87_THEN_ETC___d889 ;
  assign IF_inp_B_BIT_12_30_THEN_IF_inp_B_BIT_11_92_THE_ETC___d957 =
	     inp_B[12] ?
	       product__h1836 :
	       IF_inp_B_BIT_11_92_THEN_IF_inp_B_BIT_10_44_THE_ETC___d927 ;
  assign IF_inp_B_BIT_13_60_THEN_IF_inp_B_BIT_12_30_THE_ETC___d980 =
	     inp_B[13] ?
	       product__h1449 :
	       IF_inp_B_BIT_12_30_THEN_IF_inp_B_BIT_11_92_THE_ETC___d957 ;
  assign IF_inp_B_BIT_14_82_THEN_IF_inp_B_BIT_13_60_THE_ETC___d993 =
	     inp_B[14] ?
	       product__h1062 :
	       IF_inp_B_BIT_13_60_THEN_IF_inp_B_BIT_12_30_THE_ETC___d980 ;
  assign IF_inp_B_BIT_15_81_THEN_IF_inp_B_BIT_15_81_THE_ETC___d999 =
	     inp_B[15] ?
	       (inp_B[15] ?
		  product__h671 :
		  IF_inp_B_BIT_14_82_THEN_IF_inp_B_BIT_13_60_THE_ETC___d993) :
	       IF_inp_B_BIT_14_82_THEN_IF_inp_B_BIT_13_60_THE_ETC___d993 ;
  assign IF_inp_B_BIT_1_2_THEN_IF_inp_B_BIT_0_THEN_inp__ETC___d149 =
	     inp_B[1] ?
	       product__h6093 :
	       IF_inp_B_BIT_0_THEN_inp_A_ELSE_0___d9 ;
  assign IF_inp_B_BIT_2_52_THEN_IF_inp_B_BIT_1_2_THEN_I_ETC___d265 =
	     inp_B[2] ?
	       product__h5706 :
	       IF_inp_B_BIT_1_2_THEN_IF_inp_B_BIT_0_THEN_inp__ETC___d149 ;
  assign IF_inp_B_BIT_3_68_THEN_IF_inp_B_BIT_2_52_THEN__ETC___d373 =
	     inp_B[3] ?
	       product__h5319 :
	       IF_inp_B_BIT_2_52_THEN_IF_inp_B_BIT_1_2_THEN_I_ETC___d265 ;
  assign IF_inp_B_BIT_4_76_THEN_IF_inp_B_BIT_3_68_THEN__ETC___d472 =
	     inp_B[4] ?
	       product__h4932 :
	       IF_inp_B_BIT_3_68_THEN_IF_inp_B_BIT_2_52_THEN__ETC___d373 ;
  assign IF_inp_B_BIT_5_75_THEN_IF_inp_B_BIT_4_76_THEN__ETC___d564 =
	     inp_B[5] ?
	       product__h4545 :
	       IF_inp_B_BIT_4_76_THEN_IF_inp_B_BIT_3_68_THEN__ETC___d472 ;
  assign IF_inp_B_BIT_6_67_THEN_IF_inp_B_BIT_5_75_THEN__ETC___d647 =
	     inp_B[6] ?
	       product__h4158 :
	       IF_inp_B_BIT_5_75_THEN_IF_inp_B_BIT_4_76_THEN__ETC___d564 ;
  assign IF_inp_B_BIT_7_50_THEN_IF_inp_B_BIT_6_67_THEN__ETC___d720 =
	     inp_B[7] ?
	       product__h3771 :
	       IF_inp_B_BIT_6_67_THEN_IF_inp_B_BIT_5_75_THEN__ETC___d647 ;
  assign IF_inp_B_BIT_8_23_THEN_IF_inp_B_BIT_7_50_THEN__ETC___d784 =
	     inp_B[8] ?
	       product__h3384 :
	       IF_inp_B_BIT_7_50_THEN_IF_inp_B_BIT_6_67_THEN__ETC___d720 ;
  assign IF_inp_B_BIT_9_87_THEN_IF_inp_B_BIT_8_23_THEN__ETC___d841 =
	     inp_B[9] ?
	       product__h2997 :
	       IF_inp_B_BIT_8_23_THEN_IF_inp_B_BIT_7_50_THEN__ETC___d784 ;
  assign carry__h10534 = x__h11033 | y__h11034 ;
  assign carry__h10537 = x__h11048 | y__h11049 ;
  assign carry__h10540 = x__h11063 | y__h11064 ;
  assign carry__h11221 = x__h11720 | y__h11721 ;
  assign carry__h11224 = x__h11735 | y__h11736 ;
  assign carry__h11227 = x__h11750 | y__h11751 ;
  assign carry__h12360 = x__h12859 | y__h12860 ;
  assign carry__h12363 = x__h12874 | y__h12875 ;
  assign carry__h12366 = x__h12889 | y__h12890 ;
  assign carry__h13048 = x__h13547 | y__h13548 ;
  assign carry__h13051 = x__h13562 | y__h13563 ;
  assign carry__h13054 = x__h13577 | y__h13578 ;
  assign carry__h13735 = x__h14234 | y__h14235 ;
  assign carry__h13738 = x__h14249 | y__h14250 ;
  assign carry__h13741 = x__h14264 | y__h14265 ;
  assign carry__h14874 = x__h15373 | y__h15374 ;
  assign carry__h14877 = x__h15388 | y__h15389 ;
  assign carry__h14880 = x__h15403 | y__h15404 ;
  assign carry__h15562 = x__h16061 | y__h16062 ;
  assign carry__h15565 = x__h16076 | y__h16077 ;
  assign carry__h15568 = x__h16091 | y__h16092 ;
  assign carry__h16249 = x__h16748 | y__h16749 ;
  assign carry__h16252 = x__h16763 | y__h16764 ;
  assign carry__h16255 = x__h16778 | y__h16779 ;
  assign carry__h17388 =
	     IF_inp_B_BIT_3_68_THEN_IF_inp_B_BIT_2_52_THEN__ETC___d373[4] &
	     inp_A[0] ;
  assign carry__h17391 = x__h17902 | y__h17903 ;
  assign carry__h17394 = x__h17917 | y__h17918 ;
  assign carry__h18076 = x__h18575 | y__h18576 ;
  assign carry__h18079 = x__h18590 | y__h18591 ;
  assign carry__h18082 = x__h18605 | y__h18606 ;
  assign carry__h18763 = x__h19262 | y__h19263 ;
  assign carry__h18766 = x__h19277 | y__h19278 ;
  assign carry__h18769 = x__h19292 | y__h19293 ;
  assign carry__h19905 =
	     IF_inp_B_BIT_4_76_THEN_IF_inp_B_BIT_3_68_THEN__ETC___d472[5] &
	     inp_A[0] ;
  assign carry__h19908 = x__h20431 | y__h20432 ;
  assign carry__h20590 = x__h21089 | y__h21090 ;
  assign carry__h20593 = x__h21104 | y__h21105 ;
  assign carry__h20596 = x__h21119 | y__h21120 ;
  assign carry__h21277 = x__h21776 | y__h21777 ;
  assign carry__h21280 = x__h21791 | y__h21792 ;
  assign carry__h21283 = x__h21806 | y__h21807 ;
  assign carry__h2234 =
	     IF_inp_B_BIT_10_44_THEN_IF_inp_B_BIT_9_87_THEN_ETC___d889[11] &
	     inp_A[0] ;
  assign carry__h22422 =
	     IF_inp_B_BIT_5_75_THEN_IF_inp_B_BIT_4_76_THEN__ETC___d564[6] &
	     inp_A[0] ;
  assign carry__h23104 = x__h23603 | y__h23604 ;
  assign carry__h23107 = x__h23618 | y__h23619 ;
  assign carry__h23110 = x__h23633 | y__h23634 ;
  assign carry__h23791 = x__h24290 | y__h24291 ;
  assign carry__h23794 = x__h24305 | y__h24306 ;
  assign carry__h23797 = x__h24320 | y__h24321 ;
  assign carry__h25618 = x__h26117 | y__h26118 ;
  assign carry__h25621 = x__h26132 | y__h26133 ;
  assign carry__h25624 = x__h26147 | y__h26148 ;
  assign carry__h2621 = x__h33704 | y__h33705 ;
  assign carry__h26305 = x__h26804 | y__h26805 ;
  assign carry__h26308 = x__h26819 | y__h26820 ;
  assign carry__h26311 = x__h26834 | y__h26835 ;
  assign carry__h28132 =
	     IF_inp_B_BIT_7_50_THEN_IF_inp_B_BIT_6_67_THEN__ETC___d720[8] &
	     inp_A[0] ;
  assign carry__h28135 = x__h28646 | y__h28647 ;
  assign carry__h28138 = x__h28661 | y__h28662 ;
  assign carry__h28819 = x__h29318 | y__h29319 ;
  assign carry__h28822 = x__h29333 | y__h29334 ;
  assign carry__h28825 = x__h29348 | y__h29349 ;
  assign carry__h3008 = x__h31190 | y__h31191 ;
  assign carry__h30649 =
	     IF_inp_B_BIT_8_23_THEN_IF_inp_B_BIT_7_50_THEN__ETC___d784[9] &
	     inp_A[0] ;
  assign carry__h30652 = x__h31175 | y__h31176 ;
  assign carry__h31333 = x__h31832 | y__h31833 ;
  assign carry__h31336 = x__h31847 | y__h31848 ;
  assign carry__h31339 = x__h31862 | y__h31863 ;
  assign carry__h33166 =
	     IF_inp_B_BIT_9_87_THEN_IF_inp_B_BIT_8_23_THEN__ETC___d841[10] &
	     inp_A[0] ;
  assign carry__h33847 = x__h34346 | y__h34347 ;
  assign carry__h33850 = x__h34361 | y__h34362 ;
  assign carry__h33853 = x__h34376 | y__h34377 ;
  assign carry__h3395 = x__h28676 | y__h28677 ;
  assign carry__h36361 = x__h36860 | y__h36861 ;
  assign carry__h36364 = x__h36875 | y__h36876 ;
  assign carry__h36367 = x__h36890 | y__h36891 ;
  assign carry__h3780 =
	     IF_inp_B_BIT_6_67_THEN_IF_inp_B_BIT_5_75_THEN__ETC___d647[7] &
	     inp_A[0] ;
  assign carry__h3782 = x__h26162 | y__h26163 ;
  assign carry__h38875 =
	     IF_inp_B_BIT_11_92_THEN_IF_inp_B_BIT_10_44_THE_ETC___d927[12] &
	     inp_A[0] ;
  assign carry__h38878 = x__h39389 | y__h39390 ;
  assign carry__h38881 = x__h39404 | y__h39405 ;
  assign carry__h41392 =
	     IF_inp_B_BIT_12_30_THEN_IF_inp_B_BIT_11_92_THE_ETC___d957[13] &
	     inp_A[0] ;
  assign carry__h41395 = x__h41918 | y__h41919 ;
  assign carry__h4167 = x__h22960 | y__h22961 ;
  assign carry__h4169 = x__h23648 | y__h23649 ;
  assign carry__h43909 =
	     IF_inp_B_BIT_13_60_THEN_IF_inp_B_BIT_12_30_THE_ETC___d980[14] &
	     inp_A[0] ;
  assign carry__h4554 = x__h20446 | y__h20447 ;
  assign carry__h4556 = x__h21134 | y__h21135 ;
  assign carry__h4941 = x__h17932 | y__h17933 ;
  assign carry__h4943 = x__h18620 | y__h18621 ;
  assign carry__h5326 =
	     IF_inp_B_BIT_2_52_THEN_IF_inp_B_BIT_1_2_THEN_I_ETC___d265[3] &
	     inp_A[0] ;
  assign carry__h5328 = x__h15418 | y__h15419 ;
  assign carry__h5330 = x__h16106 | y__h16107 ;
  assign carry__h5713 = x__h12219 | y__h12220 ;
  assign carry__h5715 = x__h12904 | y__h12905 ;
  assign carry__h5717 = x__h13592 | y__h13593 ;
  assign carry__h5898 =
	     IF_inp_B_BIT_1_2_THEN_IF_inp_B_BIT_0_THEN_inp__ETC___d149[2] &
	     inp_A[0] ;
  assign carry__h6100 = x__h9705 | y__h9706 ;
  assign carry__h6102 = x__h10390 | y__h10391 ;
  assign carry__h6104 = x__h11078 | y__h11079 ;
  assign carry__h6282 = IF_inp_B_BIT_0_THEN_inp_A_ELSE_0___d9[1] & inp_A[0] ;
  assign carry__h6285 = x__h9690 | y__h9691 ;
  assign carry__h9846 = x__h10345 | y__h10346 ;
  assign carry__h9849 = x__h10360 | y__h10361 ;
  assign carry__h9852 = x__h10375 | y__h10376 ;
  assign product__h1062 =
	     { spliced_bits__h1079,
	       IF_inp_B_BIT_13_60_THEN_IF_inp_B_BIT_12_30_THE_ETC___d980[11:0] } ;
  assign product__h1449 =
	     { spliced_bits__h1466,
	       IF_inp_B_BIT_12_30_THEN_IF_inp_B_BIT_11_92_THE_ETC___d957[11:0] } ;
  assign product__h1836 =
	     { spliced_bits__h1853,
	       IF_inp_B_BIT_11_92_THEN_IF_inp_B_BIT_10_44_THE_ETC___d927[11:0] } ;
  assign product__h2223 =
	     { spliced_bits__h2240,
	       x__h35807,
	       IF_inp_B_BIT_10_44_THEN_IF_inp_B_BIT_9_87_THEN_ETC___d889[10:0] } ;
  assign product__h2610 =
	     { spliced_bits__h2627,
	       spliced_bits__h2657,
	       IF_inp_B_BIT_9_87_THEN_IF_inp_B_BIT_8_23_THEN__ETC___d841[7:0] } ;
  assign product__h2997 =
	     { spliced_bits__h3014,
	       spliced_bits__h3044,
	       IF_inp_B_BIT_8_23_THEN_IF_inp_B_BIT_7_50_THEN__ETC___d784[7:0] } ;
  assign product__h3384 =
	     { spliced_bits__h3401,
	       spliced_bits__h3431,
	       IF_inp_B_BIT_7_50_THEN_IF_inp_B_BIT_6_67_THEN__ETC___d720[7:0] } ;
  assign product__h3771 =
	     { spliced_bits__h3788,
	       spliced_bits__h3818,
	       x__h25063,
	       IF_inp_B_BIT_6_67_THEN_IF_inp_B_BIT_5_75_THEN__ETC___d647[6:0] } ;
  assign product__h4158 =
	     { spliced_bits__h4175,
	       spliced_bits__h4205,
	       spliced_bits__h4235,
	       IF_inp_B_BIT_5_75_THEN_IF_inp_B_BIT_4_76_THEN__ETC___d564[3:0] } ;
  assign product__h4545 =
	     { spliced_bits__h4562,
	       spliced_bits__h4592,
	       spliced_bits__h4622,
	       IF_inp_B_BIT_4_76_THEN_IF_inp_B_BIT_3_68_THEN__ETC___d472[3:0] } ;
  assign product__h4932 =
	     { spliced_bits__h4949,
	       spliced_bits__h4979,
	       spliced_bits__h5009,
	       IF_inp_B_BIT_3_68_THEN_IF_inp_B_BIT_2_52_THEN__ETC___d373[3:0] } ;
  assign product__h5319 =
	     { spliced_bits__h5336,
	       spliced_bits__h5366,
	       spliced_bits__h5396,
	       spliced_bits__h5426 } ;
  assign product__h5706 =
	     { spliced_bits__h5723,
	       spliced_bits__h5753,
	       spliced_bits__h5783,
	       spliced_bits__h5813 } ;
  assign product__h6093 =
	     { spliced_bits__h6110,
	       spliced_bits__h6140,
	       spliced_bits__h6170,
	       spliced_bits__h6200 } ;
  assign product__h671 =
	     { x__h46550,
	       IF_inp_B_BIT_14_82_THEN_IF_inp_B_BIT_13_60_THE_ETC___d993[14:0] } ;
  assign product_temp__h239 = { {16{x__h243[15]}}, x__h243 } ;
  assign spliced_bits__h1079 =
	     { x__h44036 ^ carry__h43909,
	       x__h44162,
	       IF_inp_B_BIT_13_60_THEN_IF_inp_B_BIT_12_30_THE_ETC___d980[13:12] } ;
  assign spliced_bits__h1466 =
	     { x__h41522 ^ carry__h41395,
	       x__h41648 ^ carry__h41392,
	       x__h41731,
	       IF_inp_B_BIT_12_30_THEN_IF_inp_B_BIT_11_92_THE_ETC___d957[12] } ;
  assign spliced_bits__h1853 =
	     { x__h39008 ^ carry__h38881,
	       x__h39134 ^ carry__h38878,
	       x__h39217 ^ carry__h38875,
	       x__h39300 } ;
  assign spliced_bits__h2240 =
	     { x__h36494 ^ carry__h36367,
	       x__h36620 ^ carry__h36364,
	       x__h36703 ^ carry__h36361,
	       x__h36786 ^ carry__h2234 } ;
  assign spliced_bits__h2627 =
	     { x__h33980 ^ carry__h33853,
	       x__h34106 ^ carry__h33850,
	       x__h34189 ^ carry__h33847,
	       x__h34272 ^ carry__h2621 } ;
  assign spliced_bits__h2657 =
	     { x__h33293 ^ carry__h33166,
	       x__h33419,
	       IF_inp_B_BIT_9_87_THEN_IF_inp_B_BIT_8_23_THEN__ETC___d841[9:8] } ;
  assign spliced_bits__h3014 =
	     { x__h31466 ^ carry__h31339,
	       x__h31592 ^ carry__h31336,
	       x__h31675 ^ carry__h31333,
	       x__h31758 ^ carry__h3008 } ;
  assign spliced_bits__h3044 =
	     { x__h30779 ^ carry__h30652,
	       x__h30905 ^ carry__h30649,
	       x__h30988,
	       IF_inp_B_BIT_8_23_THEN_IF_inp_B_BIT_7_50_THEN__ETC___d784[8] } ;
  assign spliced_bits__h3401 =
	     { x__h28952 ^ carry__h28825,
	       x__h29078 ^ carry__h28822,
	       x__h29161 ^ carry__h28819,
	       x__h29244 ^ carry__h3395 } ;
  assign spliced_bits__h3431 =
	     { x__h28265 ^ carry__h28138,
	       x__h28391 ^ carry__h28135,
	       x__h28474 ^ carry__h28132,
	       x__h28557 } ;
  assign spliced_bits__h3788 =
	     { x__h26438 ^ carry__h26311,
	       x__h26564 ^ carry__h26308,
	       x__h26647 ^ carry__h26305,
	       x__h26730 ^ carry__h3782 } ;
  assign spliced_bits__h3818 =
	     { x__h25751 ^ carry__h25624,
	       x__h25877 ^ carry__h25621,
	       x__h25960 ^ carry__h25618,
	       x__h26043 ^ carry__h3780 } ;
  assign spliced_bits__h4175 =
	     { x__h23924 ^ carry__h23797,
	       x__h24050 ^ carry__h23794,
	       x__h24133 ^ carry__h23791,
	       x__h24216 ^ carry__h4169 } ;
  assign spliced_bits__h4205 =
	     { x__h23237 ^ carry__h23110,
	       x__h23363 ^ carry__h23107,
	       x__h23446 ^ carry__h23104,
	       x__h23529 ^ carry__h4167 } ;
  assign spliced_bits__h4235 =
	     { x__h22549 ^ carry__h22422,
	       x__h22675,
	       IF_inp_B_BIT_5_75_THEN_IF_inp_B_BIT_4_76_THEN__ETC___d564[5:4] } ;
  assign spliced_bits__h4562 =
	     { x__h21410 ^ carry__h21283,
	       x__h21536 ^ carry__h21280,
	       x__h21619 ^ carry__h21277,
	       x__h21702 ^ carry__h4556 } ;
  assign spliced_bits__h4592 =
	     { x__h20723 ^ carry__h20596,
	       x__h20849 ^ carry__h20593,
	       x__h20932 ^ carry__h20590,
	       x__h21015 ^ carry__h4554 } ;
  assign spliced_bits__h4622 =
	     { x__h20035 ^ carry__h19908,
	       x__h20161 ^ carry__h19905,
	       x__h20244,
	       IF_inp_B_BIT_4_76_THEN_IF_inp_B_BIT_3_68_THEN__ETC___d472[4] } ;
  assign spliced_bits__h4949 =
	     { x__h18896 ^ carry__h18769,
	       x__h19022 ^ carry__h18766,
	       x__h19105 ^ carry__h18763,
	       x__h19188 ^ carry__h4943 } ;
  assign spliced_bits__h4979 =
	     { x__h18209 ^ carry__h18082,
	       x__h18335 ^ carry__h18079,
	       x__h18418 ^ carry__h18076,
	       x__h18501 ^ carry__h4941 } ;
  assign spliced_bits__h5009 =
	     { x__h17521 ^ carry__h17394,
	       x__h17647 ^ carry__h17391,
	       x__h17730 ^ carry__h17388,
	       x__h17813 } ;
  assign spliced_bits__h5336 =
	     { x__h16382 ^ carry__h16255,
	       x__h16508 ^ carry__h16252,
	       x__h16591 ^ carry__h16249,
	       x__h16674 ^ carry__h5330 } ;
  assign spliced_bits__h5366 =
	     { x__h15695 ^ carry__h15568,
	       x__h15821 ^ carry__h15565,
	       x__h15904 ^ carry__h15562,
	       x__h15987 ^ carry__h5328 } ;
  assign spliced_bits__h5396 =
	     { x__h15007 ^ carry__h14880,
	       x__h15133 ^ carry__h14877,
	       x__h15216 ^ carry__h14874,
	       x__h15299 ^ carry__h5326 } ;
  assign spliced_bits__h5426 =
	     { x__h5638,
	       IF_inp_B_BIT_2_52_THEN_IF_inp_B_BIT_1_2_THEN_I_ETC___d265[2:0] } ;
  assign spliced_bits__h5723 =
	     { x__h13868 ^ carry__h13741,
	       x__h13994 ^ carry__h13738,
	       x__h14077 ^ carry__h13735,
	       x__h14160 ^ carry__h5717 } ;
  assign spliced_bits__h5753 =
	     { x__h13181 ^ carry__h13054,
	       x__h13307 ^ carry__h13051,
	       x__h13390 ^ carry__h13048,
	       x__h13473 ^ carry__h5715 } ;
  assign spliced_bits__h5783 =
	     { x__h12493 ^ carry__h12366,
	       x__h12619 ^ carry__h12363,
	       x__h12702 ^ carry__h12360,
	       x__h12785 ^ carry__h5713 } ;
  assign spliced_bits__h5813 =
	     { x__h6025 ^ carry__h5898,
	       x__h11954,
	       IF_inp_B_BIT_1_2_THEN_IF_inp_B_BIT_0_THEN_inp__ETC___d149[1:0] } ;
  assign spliced_bits__h6110 =
	     { x__h11354 ^ carry__h11227,
	       x__h11480 ^ carry__h11224,
	       x__h11563 ^ carry__h11221,
	       x__h11646 ^ carry__h6104 } ;
  assign spliced_bits__h6140 =
	     { x__h10667 ^ carry__h10540,
	       x__h10793 ^ carry__h10537,
	       x__h10876 ^ carry__h10534,
	       x__h10959 ^ carry__h6102 } ;
  assign spliced_bits__h6170 =
	     { x__h9979 ^ carry__h9852,
	       x__h10105 ^ carry__h9849,
	       x__h10188 ^ carry__h9846,
	       x__h10271 ^ carry__h6100 } ;
  assign spliced_bits__h6200 =
	     { x__h6412 ^ carry__h6285,
	       x__h9440 ^ carry__h6282,
	       IF_inp_B_BIT_0_THEN_inp_A_ELSE_0___d9[1] ^ inp_A[0],
	       IF_inp_B_BIT_0_THEN_inp_A_ELSE_0___d9[0] } ;
  assign x__h10105 = IF_inp_B_BIT_0_THEN_inp_A_ELSE_0___d9[6] ^ inp_A[5] ;
  assign x__h10188 = IF_inp_B_BIT_0_THEN_inp_A_ELSE_0___d9[5] ^ inp_A[4] ;
  assign x__h10271 = IF_inp_B_BIT_0_THEN_inp_A_ELSE_0___d9[4] ^ inp_A[3] ;
  assign x__h10345 = x__h10347 | y__h10348 ;
  assign x__h10347 = IF_inp_B_BIT_0_THEN_inp_A_ELSE_0___d9[4] & inp_A[3] ;
  assign x__h10360 = x__h10362 | y__h10363 ;
  assign x__h10362 = IF_inp_B_BIT_0_THEN_inp_A_ELSE_0___d9[5] & inp_A[4] ;
  assign x__h10375 = x__h10377 | y__h10378 ;
  assign x__h10377 = IF_inp_B_BIT_0_THEN_inp_A_ELSE_0___d9[6] & inp_A[5] ;
  assign x__h10390 = x__h10392 | y__h10393 ;
  assign x__h10392 = IF_inp_B_BIT_0_THEN_inp_A_ELSE_0___d9[7] & inp_A[6] ;
  assign x__h10667 = IF_inp_B_BIT_0_THEN_inp_A_ELSE_0___d9[11] ^ inp_A[10] ;
  assign x__h10793 = IF_inp_B_BIT_0_THEN_inp_A_ELSE_0___d9[10] ^ inp_A[9] ;
  assign x__h10876 = IF_inp_B_BIT_0_THEN_inp_A_ELSE_0___d9[9] ^ inp_A[8] ;
  assign x__h10959 = IF_inp_B_BIT_0_THEN_inp_A_ELSE_0___d9[8] ^ inp_A[7] ;
  assign x__h11033 = x__h11035 | y__h11036 ;
  assign x__h11035 = IF_inp_B_BIT_0_THEN_inp_A_ELSE_0___d9[8] & inp_A[7] ;
  assign x__h11048 = x__h11050 | y__h11051 ;
  assign x__h11050 = IF_inp_B_BIT_0_THEN_inp_A_ELSE_0___d9[9] & inp_A[8] ;
  assign x__h11063 = x__h11065 | y__h11066 ;
  assign x__h11065 = IF_inp_B_BIT_0_THEN_inp_A_ELSE_0___d9[10] & inp_A[9] ;
  assign x__h11078 = x__h11080 | y__h11081 ;
  assign x__h11080 = IF_inp_B_BIT_0_THEN_inp_A_ELSE_0___d9[11] & inp_A[10] ;
  assign x__h11354 = IF_inp_B_BIT_0_THEN_inp_A_ELSE_0___d9[15] ^ inp_A[14] ;
  assign x__h11480 = IF_inp_B_BIT_0_THEN_inp_A_ELSE_0___d9[14] ^ inp_A[13] ;
  assign x__h11563 = IF_inp_B_BIT_0_THEN_inp_A_ELSE_0___d9[13] ^ inp_A[12] ;
  assign x__h11646 = IF_inp_B_BIT_0_THEN_inp_A_ELSE_0___d9[12] ^ inp_A[11] ;
  assign x__h11720 = x__h11722 | y__h11723 ;
  assign x__h11722 = IF_inp_B_BIT_0_THEN_inp_A_ELSE_0___d9[12] & inp_A[11] ;
  assign x__h11735 = x__h11737 | y__h11738 ;
  assign x__h11737 = IF_inp_B_BIT_0_THEN_inp_A_ELSE_0___d9[13] & inp_A[12] ;
  assign x__h11750 = x__h11752 | y__h11753 ;
  assign x__h11752 = IF_inp_B_BIT_0_THEN_inp_A_ELSE_0___d9[14] & inp_A[13] ;
  assign x__h11954 =
	     IF_inp_B_BIT_1_2_THEN_IF_inp_B_BIT_0_THEN_inp__ETC___d149[2] ^
	     inp_A[0] ;
  assign x__h12219 = x__h12221 | y__h12222 ;
  assign x__h12221 =
	     IF_inp_B_BIT_1_2_THEN_IF_inp_B_BIT_0_THEN_inp__ETC___d149[3] &
	     inp_A[1] ;
  assign x__h12493 =
	     IF_inp_B_BIT_1_2_THEN_IF_inp_B_BIT_0_THEN_inp__ETC___d149[7] ^
	     inp_A[5] ;
  assign x__h12619 =
	     IF_inp_B_BIT_1_2_THEN_IF_inp_B_BIT_0_THEN_inp__ETC___d149[6] ^
	     inp_A[4] ;
  assign x__h12702 =
	     IF_inp_B_BIT_1_2_THEN_IF_inp_B_BIT_0_THEN_inp__ETC___d149[5] ^
	     inp_A[3] ;
  assign x__h12785 =
	     IF_inp_B_BIT_1_2_THEN_IF_inp_B_BIT_0_THEN_inp__ETC___d149[4] ^
	     inp_A[2] ;
  assign x__h12859 = x__h12861 | y__h12862 ;
  assign x__h12861 =
	     IF_inp_B_BIT_1_2_THEN_IF_inp_B_BIT_0_THEN_inp__ETC___d149[4] &
	     inp_A[2] ;
  assign x__h12874 = x__h12876 | y__h12877 ;
  assign x__h12876 =
	     IF_inp_B_BIT_1_2_THEN_IF_inp_B_BIT_0_THEN_inp__ETC___d149[5] &
	     inp_A[3] ;
  assign x__h12889 = x__h12891 | y__h12892 ;
  assign x__h12891 =
	     IF_inp_B_BIT_1_2_THEN_IF_inp_B_BIT_0_THEN_inp__ETC___d149[6] &
	     inp_A[4] ;
  assign x__h12904 = x__h12906 | y__h12907 ;
  assign x__h12906 =
	     IF_inp_B_BIT_1_2_THEN_IF_inp_B_BIT_0_THEN_inp__ETC___d149[7] &
	     inp_A[5] ;
  assign x__h13181 =
	     IF_inp_B_BIT_1_2_THEN_IF_inp_B_BIT_0_THEN_inp__ETC___d149[11] ^
	     inp_A[9] ;
  assign x__h13307 =
	     IF_inp_B_BIT_1_2_THEN_IF_inp_B_BIT_0_THEN_inp__ETC___d149[10] ^
	     inp_A[8] ;
  assign x__h13390 =
	     IF_inp_B_BIT_1_2_THEN_IF_inp_B_BIT_0_THEN_inp__ETC___d149[9] ^
	     inp_A[7] ;
  assign x__h13473 =
	     IF_inp_B_BIT_1_2_THEN_IF_inp_B_BIT_0_THEN_inp__ETC___d149[8] ^
	     inp_A[6] ;
  assign x__h13547 = x__h13549 | y__h13550 ;
  assign x__h13549 =
	     IF_inp_B_BIT_1_2_THEN_IF_inp_B_BIT_0_THEN_inp__ETC___d149[8] &
	     inp_A[6] ;
  assign x__h13562 = x__h13564 | y__h13565 ;
  assign x__h13564 =
	     IF_inp_B_BIT_1_2_THEN_IF_inp_B_BIT_0_THEN_inp__ETC___d149[9] &
	     inp_A[7] ;
  assign x__h13577 = x__h13579 | y__h13580 ;
  assign x__h13579 =
	     IF_inp_B_BIT_1_2_THEN_IF_inp_B_BIT_0_THEN_inp__ETC___d149[10] &
	     inp_A[8] ;
  assign x__h13592 = x__h13594 | y__h13595 ;
  assign x__h13594 =
	     IF_inp_B_BIT_1_2_THEN_IF_inp_B_BIT_0_THEN_inp__ETC___d149[11] &
	     inp_A[9] ;
  assign x__h13868 =
	     IF_inp_B_BIT_1_2_THEN_IF_inp_B_BIT_0_THEN_inp__ETC___d149[15] ^
	     inp_A[13] ;
  assign x__h13994 =
	     IF_inp_B_BIT_1_2_THEN_IF_inp_B_BIT_0_THEN_inp__ETC___d149[14] ^
	     inp_A[12] ;
  assign x__h14077 =
	     IF_inp_B_BIT_1_2_THEN_IF_inp_B_BIT_0_THEN_inp__ETC___d149[13] ^
	     inp_A[11] ;
  assign x__h14160 =
	     IF_inp_B_BIT_1_2_THEN_IF_inp_B_BIT_0_THEN_inp__ETC___d149[12] ^
	     inp_A[10] ;
  assign x__h14234 = x__h14236 | y__h14237 ;
  assign x__h14236 =
	     IF_inp_B_BIT_1_2_THEN_IF_inp_B_BIT_0_THEN_inp__ETC___d149[12] &
	     inp_A[10] ;
  assign x__h14249 = x__h14251 | y__h14252 ;
  assign x__h14251 =
	     IF_inp_B_BIT_1_2_THEN_IF_inp_B_BIT_0_THEN_inp__ETC___d149[13] &
	     inp_A[11] ;
  assign x__h14264 = x__h14266 | y__h14267 ;
  assign x__h14266 =
	     IF_inp_B_BIT_1_2_THEN_IF_inp_B_BIT_0_THEN_inp__ETC___d149[14] &
	     inp_A[12] ;
  assign x__h15007 =
	     IF_inp_B_BIT_2_52_THEN_IF_inp_B_BIT_1_2_THEN_I_ETC___d265[7] ^
	     inp_A[4] ;
  assign x__h15133 =
	     IF_inp_B_BIT_2_52_THEN_IF_inp_B_BIT_1_2_THEN_I_ETC___d265[6] ^
	     inp_A[3] ;
  assign x__h15216 =
	     IF_inp_B_BIT_2_52_THEN_IF_inp_B_BIT_1_2_THEN_I_ETC___d265[5] ^
	     inp_A[2] ;
  assign x__h15299 =
	     IF_inp_B_BIT_2_52_THEN_IF_inp_B_BIT_1_2_THEN_I_ETC___d265[4] ^
	     inp_A[1] ;
  assign x__h15373 = x__h15375 | y__h15376 ;
  assign x__h15375 =
	     IF_inp_B_BIT_2_52_THEN_IF_inp_B_BIT_1_2_THEN_I_ETC___d265[4] &
	     inp_A[1] ;
  assign x__h15388 = x__h15390 | y__h15391 ;
  assign x__h15390 =
	     IF_inp_B_BIT_2_52_THEN_IF_inp_B_BIT_1_2_THEN_I_ETC___d265[5] &
	     inp_A[2] ;
  assign x__h15403 = x__h15405 | y__h15406 ;
  assign x__h15405 =
	     IF_inp_B_BIT_2_52_THEN_IF_inp_B_BIT_1_2_THEN_I_ETC___d265[6] &
	     inp_A[3] ;
  assign x__h15418 = x__h15420 | y__h15421 ;
  assign x__h15420 =
	     IF_inp_B_BIT_2_52_THEN_IF_inp_B_BIT_1_2_THEN_I_ETC___d265[7] &
	     inp_A[4] ;
  assign x__h15695 =
	     IF_inp_B_BIT_2_52_THEN_IF_inp_B_BIT_1_2_THEN_I_ETC___d265[11] ^
	     inp_A[8] ;
  assign x__h15821 =
	     IF_inp_B_BIT_2_52_THEN_IF_inp_B_BIT_1_2_THEN_I_ETC___d265[10] ^
	     inp_A[7] ;
  assign x__h15904 =
	     IF_inp_B_BIT_2_52_THEN_IF_inp_B_BIT_1_2_THEN_I_ETC___d265[9] ^
	     inp_A[6] ;
  assign x__h15987 =
	     IF_inp_B_BIT_2_52_THEN_IF_inp_B_BIT_1_2_THEN_I_ETC___d265[8] ^
	     inp_A[5] ;
  assign x__h16061 = x__h16063 | y__h16064 ;
  assign x__h16063 =
	     IF_inp_B_BIT_2_52_THEN_IF_inp_B_BIT_1_2_THEN_I_ETC___d265[8] &
	     inp_A[5] ;
  assign x__h16076 = x__h16078 | y__h16079 ;
  assign x__h16078 =
	     IF_inp_B_BIT_2_52_THEN_IF_inp_B_BIT_1_2_THEN_I_ETC___d265[9] &
	     inp_A[6] ;
  assign x__h16091 = x__h16093 | y__h16094 ;
  assign x__h16093 =
	     IF_inp_B_BIT_2_52_THEN_IF_inp_B_BIT_1_2_THEN_I_ETC___d265[10] &
	     inp_A[7] ;
  assign x__h16106 = x__h16108 | y__h16109 ;
  assign x__h16108 =
	     IF_inp_B_BIT_2_52_THEN_IF_inp_B_BIT_1_2_THEN_I_ETC___d265[11] &
	     inp_A[8] ;
  assign x__h16382 =
	     IF_inp_B_BIT_2_52_THEN_IF_inp_B_BIT_1_2_THEN_I_ETC___d265[15] ^
	     inp_A[12] ;
  assign x__h16508 =
	     IF_inp_B_BIT_2_52_THEN_IF_inp_B_BIT_1_2_THEN_I_ETC___d265[14] ^
	     inp_A[11] ;
  assign x__h16591 =
	     IF_inp_B_BIT_2_52_THEN_IF_inp_B_BIT_1_2_THEN_I_ETC___d265[13] ^
	     inp_A[10] ;
  assign x__h16674 =
	     IF_inp_B_BIT_2_52_THEN_IF_inp_B_BIT_1_2_THEN_I_ETC___d265[12] ^
	     inp_A[9] ;
  assign x__h16748 = x__h16750 | y__h16751 ;
  assign x__h16750 =
	     IF_inp_B_BIT_2_52_THEN_IF_inp_B_BIT_1_2_THEN_I_ETC___d265[12] &
	     inp_A[9] ;
  assign x__h16763 = x__h16765 | y__h16766 ;
  assign x__h16765 =
	     IF_inp_B_BIT_2_52_THEN_IF_inp_B_BIT_1_2_THEN_I_ETC___d265[13] &
	     inp_A[10] ;
  assign x__h16778 = x__h16780 | y__h16781 ;
  assign x__h16780 =
	     IF_inp_B_BIT_2_52_THEN_IF_inp_B_BIT_1_2_THEN_I_ETC___d265[14] &
	     inp_A[11] ;
  assign x__h17521 =
	     IF_inp_B_BIT_3_68_THEN_IF_inp_B_BIT_2_52_THEN__ETC___d373[7] ^
	     inp_A[3] ;
  assign x__h17647 =
	     IF_inp_B_BIT_3_68_THEN_IF_inp_B_BIT_2_52_THEN__ETC___d373[6] ^
	     inp_A[2] ;
  assign x__h17730 =
	     IF_inp_B_BIT_3_68_THEN_IF_inp_B_BIT_2_52_THEN__ETC___d373[5] ^
	     inp_A[1] ;
  assign x__h17813 =
	     IF_inp_B_BIT_3_68_THEN_IF_inp_B_BIT_2_52_THEN__ETC___d373[4] ^
	     inp_A[0] ;
  assign x__h17902 = x__h17904 | y__h17905 ;
  assign x__h17904 =
	     IF_inp_B_BIT_3_68_THEN_IF_inp_B_BIT_2_52_THEN__ETC___d373[5] &
	     inp_A[1] ;
  assign x__h17917 = x__h17919 | y__h17920 ;
  assign x__h17919 =
	     IF_inp_B_BIT_3_68_THEN_IF_inp_B_BIT_2_52_THEN__ETC___d373[6] &
	     inp_A[2] ;
  assign x__h17932 = x__h17934 | y__h17935 ;
  assign x__h17934 =
	     IF_inp_B_BIT_3_68_THEN_IF_inp_B_BIT_2_52_THEN__ETC___d373[7] &
	     inp_A[3] ;
  assign x__h18209 =
	     IF_inp_B_BIT_3_68_THEN_IF_inp_B_BIT_2_52_THEN__ETC___d373[11] ^
	     inp_A[7] ;
  assign x__h18335 =
	     IF_inp_B_BIT_3_68_THEN_IF_inp_B_BIT_2_52_THEN__ETC___d373[10] ^
	     inp_A[6] ;
  assign x__h18418 =
	     IF_inp_B_BIT_3_68_THEN_IF_inp_B_BIT_2_52_THEN__ETC___d373[9] ^
	     inp_A[5] ;
  assign x__h18501 =
	     IF_inp_B_BIT_3_68_THEN_IF_inp_B_BIT_2_52_THEN__ETC___d373[8] ^
	     inp_A[4] ;
  assign x__h18575 = x__h18577 | y__h18578 ;
  assign x__h18577 =
	     IF_inp_B_BIT_3_68_THEN_IF_inp_B_BIT_2_52_THEN__ETC___d373[8] &
	     inp_A[4] ;
  assign x__h18590 = x__h18592 | y__h18593 ;
  assign x__h18592 =
	     IF_inp_B_BIT_3_68_THEN_IF_inp_B_BIT_2_52_THEN__ETC___d373[9] &
	     inp_A[5] ;
  assign x__h18605 = x__h18607 | y__h18608 ;
  assign x__h18607 =
	     IF_inp_B_BIT_3_68_THEN_IF_inp_B_BIT_2_52_THEN__ETC___d373[10] &
	     inp_A[6] ;
  assign x__h18620 = x__h18622 | y__h18623 ;
  assign x__h18622 =
	     IF_inp_B_BIT_3_68_THEN_IF_inp_B_BIT_2_52_THEN__ETC___d373[11] &
	     inp_A[7] ;
  assign x__h18896 =
	     IF_inp_B_BIT_3_68_THEN_IF_inp_B_BIT_2_52_THEN__ETC___d373[15] ^
	     inp_A[11] ;
  assign x__h19022 =
	     IF_inp_B_BIT_3_68_THEN_IF_inp_B_BIT_2_52_THEN__ETC___d373[14] ^
	     inp_A[10] ;
  assign x__h19105 =
	     IF_inp_B_BIT_3_68_THEN_IF_inp_B_BIT_2_52_THEN__ETC___d373[13] ^
	     inp_A[9] ;
  assign x__h19188 =
	     IF_inp_B_BIT_3_68_THEN_IF_inp_B_BIT_2_52_THEN__ETC___d373[12] ^
	     inp_A[8] ;
  assign x__h19262 = x__h19264 | y__h19265 ;
  assign x__h19264 =
	     IF_inp_B_BIT_3_68_THEN_IF_inp_B_BIT_2_52_THEN__ETC___d373[12] &
	     inp_A[8] ;
  assign x__h19277 = x__h19279 | y__h19280 ;
  assign x__h19279 =
	     IF_inp_B_BIT_3_68_THEN_IF_inp_B_BIT_2_52_THEN__ETC___d373[13] &
	     inp_A[9] ;
  assign x__h19292 = x__h19294 | y__h19295 ;
  assign x__h19294 =
	     IF_inp_B_BIT_3_68_THEN_IF_inp_B_BIT_2_52_THEN__ETC___d373[14] &
	     inp_A[10] ;
  assign x__h20035 =
	     IF_inp_B_BIT_4_76_THEN_IF_inp_B_BIT_3_68_THEN__ETC___d472[7] ^
	     inp_A[2] ;
  assign x__h20161 =
	     IF_inp_B_BIT_4_76_THEN_IF_inp_B_BIT_3_68_THEN__ETC___d472[6] ^
	     inp_A[1] ;
  assign x__h20244 =
	     IF_inp_B_BIT_4_76_THEN_IF_inp_B_BIT_3_68_THEN__ETC___d472[5] ^
	     inp_A[0] ;
  assign x__h20431 = x__h20433 | y__h20434 ;
  assign x__h20433 =
	     IF_inp_B_BIT_4_76_THEN_IF_inp_B_BIT_3_68_THEN__ETC___d472[6] &
	     inp_A[1] ;
  assign x__h20446 = x__h20448 | y__h20449 ;
  assign x__h20448 =
	     IF_inp_B_BIT_4_76_THEN_IF_inp_B_BIT_3_68_THEN__ETC___d472[7] &
	     inp_A[2] ;
  assign x__h20723 =
	     IF_inp_B_BIT_4_76_THEN_IF_inp_B_BIT_3_68_THEN__ETC___d472[11] ^
	     inp_A[6] ;
  assign x__h20849 =
	     IF_inp_B_BIT_4_76_THEN_IF_inp_B_BIT_3_68_THEN__ETC___d472[10] ^
	     inp_A[5] ;
  assign x__h20932 =
	     IF_inp_B_BIT_4_76_THEN_IF_inp_B_BIT_3_68_THEN__ETC___d472[9] ^
	     inp_A[4] ;
  assign x__h21015 =
	     IF_inp_B_BIT_4_76_THEN_IF_inp_B_BIT_3_68_THEN__ETC___d472[8] ^
	     inp_A[3] ;
  assign x__h21089 = x__h21091 | y__h21092 ;
  assign x__h21091 =
	     IF_inp_B_BIT_4_76_THEN_IF_inp_B_BIT_3_68_THEN__ETC___d472[8] &
	     inp_A[3] ;
  assign x__h21104 = x__h21106 | y__h21107 ;
  assign x__h21106 =
	     IF_inp_B_BIT_4_76_THEN_IF_inp_B_BIT_3_68_THEN__ETC___d472[9] &
	     inp_A[4] ;
  assign x__h21119 = x__h21121 | y__h21122 ;
  assign x__h21121 =
	     IF_inp_B_BIT_4_76_THEN_IF_inp_B_BIT_3_68_THEN__ETC___d472[10] &
	     inp_A[5] ;
  assign x__h21134 = x__h21136 | y__h21137 ;
  assign x__h21136 =
	     IF_inp_B_BIT_4_76_THEN_IF_inp_B_BIT_3_68_THEN__ETC___d472[11] &
	     inp_A[6] ;
  assign x__h21410 =
	     IF_inp_B_BIT_4_76_THEN_IF_inp_B_BIT_3_68_THEN__ETC___d472[15] ^
	     inp_A[10] ;
  assign x__h21536 =
	     IF_inp_B_BIT_4_76_THEN_IF_inp_B_BIT_3_68_THEN__ETC___d472[14] ^
	     inp_A[9] ;
  assign x__h21619 =
	     IF_inp_B_BIT_4_76_THEN_IF_inp_B_BIT_3_68_THEN__ETC___d472[13] ^
	     inp_A[8] ;
  assign x__h21702 =
	     IF_inp_B_BIT_4_76_THEN_IF_inp_B_BIT_3_68_THEN__ETC___d472[12] ^
	     inp_A[7] ;
  assign x__h21776 = x__h21778 | y__h21779 ;
  assign x__h21778 =
	     IF_inp_B_BIT_4_76_THEN_IF_inp_B_BIT_3_68_THEN__ETC___d472[12] &
	     inp_A[7] ;
  assign x__h21791 = x__h21793 | y__h21794 ;
  assign x__h21793 =
	     IF_inp_B_BIT_4_76_THEN_IF_inp_B_BIT_3_68_THEN__ETC___d472[13] &
	     inp_A[8] ;
  assign x__h21806 = x__h21808 | y__h21809 ;
  assign x__h21808 =
	     IF_inp_B_BIT_4_76_THEN_IF_inp_B_BIT_3_68_THEN__ETC___d472[14] &
	     inp_A[9] ;
  assign x__h22549 =
	     IF_inp_B_BIT_5_75_THEN_IF_inp_B_BIT_4_76_THEN__ETC___d564[7] ^
	     inp_A[1] ;
  assign x__h22675 =
	     IF_inp_B_BIT_5_75_THEN_IF_inp_B_BIT_4_76_THEN__ETC___d564[6] ^
	     inp_A[0] ;
  assign x__h22960 = x__h22962 | y__h22963 ;
  assign x__h22962 =
	     IF_inp_B_BIT_5_75_THEN_IF_inp_B_BIT_4_76_THEN__ETC___d564[7] &
	     inp_A[1] ;
  assign x__h23237 =
	     IF_inp_B_BIT_5_75_THEN_IF_inp_B_BIT_4_76_THEN__ETC___d564[11] ^
	     inp_A[5] ;
  assign x__h23363 =
	     IF_inp_B_BIT_5_75_THEN_IF_inp_B_BIT_4_76_THEN__ETC___d564[10] ^
	     inp_A[4] ;
  assign x__h23446 =
	     IF_inp_B_BIT_5_75_THEN_IF_inp_B_BIT_4_76_THEN__ETC___d564[9] ^
	     inp_A[3] ;
  assign x__h23529 =
	     IF_inp_B_BIT_5_75_THEN_IF_inp_B_BIT_4_76_THEN__ETC___d564[8] ^
	     inp_A[2] ;
  assign x__h23603 = x__h23605 | y__h23606 ;
  assign x__h23605 =
	     IF_inp_B_BIT_5_75_THEN_IF_inp_B_BIT_4_76_THEN__ETC___d564[8] &
	     inp_A[2] ;
  assign x__h23618 = x__h23620 | y__h23621 ;
  assign x__h23620 =
	     IF_inp_B_BIT_5_75_THEN_IF_inp_B_BIT_4_76_THEN__ETC___d564[9] &
	     inp_A[3] ;
  assign x__h23633 = x__h23635 | y__h23636 ;
  assign x__h23635 =
	     IF_inp_B_BIT_5_75_THEN_IF_inp_B_BIT_4_76_THEN__ETC___d564[10] &
	     inp_A[4] ;
  assign x__h23648 = x__h23650 | y__h23651 ;
  assign x__h23650 =
	     IF_inp_B_BIT_5_75_THEN_IF_inp_B_BIT_4_76_THEN__ETC___d564[11] &
	     inp_A[5] ;
  assign x__h23924 =
	     IF_inp_B_BIT_5_75_THEN_IF_inp_B_BIT_4_76_THEN__ETC___d564[15] ^
	     inp_A[9] ;
  assign x__h24050 =
	     IF_inp_B_BIT_5_75_THEN_IF_inp_B_BIT_4_76_THEN__ETC___d564[14] ^
	     inp_A[8] ;
  assign x__h24133 =
	     IF_inp_B_BIT_5_75_THEN_IF_inp_B_BIT_4_76_THEN__ETC___d564[13] ^
	     inp_A[7] ;
  assign x__h24216 =
	     IF_inp_B_BIT_5_75_THEN_IF_inp_B_BIT_4_76_THEN__ETC___d564[12] ^
	     inp_A[6] ;
  assign x__h24290 = x__h24292 | y__h24293 ;
  assign x__h24292 =
	     IF_inp_B_BIT_5_75_THEN_IF_inp_B_BIT_4_76_THEN__ETC___d564[12] &
	     inp_A[6] ;
  assign x__h243 =
	     (inp_B == 16'd0) ?
	       inp_B :
	       IF_inp_B_BITS_15_TO_1_EQ_0_THEN_IF_inp_B_BIT_0_ETC___d1013 ;
  assign x__h24305 = x__h24307 | y__h24308 ;
  assign x__h24307 =
	     IF_inp_B_BIT_5_75_THEN_IF_inp_B_BIT_4_76_THEN__ETC___d564[13] &
	     inp_A[7] ;
  assign x__h24320 = x__h24322 | y__h24323 ;
  assign x__h24322 =
	     IF_inp_B_BIT_5_75_THEN_IF_inp_B_BIT_4_76_THEN__ETC___d564[14] &
	     inp_A[8] ;
  assign x__h25063 =
	     IF_inp_B_BIT_6_67_THEN_IF_inp_B_BIT_5_75_THEN__ETC___d647[7] ^
	     inp_A[0] ;
  assign x__h25751 =
	     IF_inp_B_BIT_6_67_THEN_IF_inp_B_BIT_5_75_THEN__ETC___d647[11] ^
	     inp_A[4] ;
  assign x__h25877 =
	     IF_inp_B_BIT_6_67_THEN_IF_inp_B_BIT_5_75_THEN__ETC___d647[10] ^
	     inp_A[3] ;
  assign x__h25960 =
	     IF_inp_B_BIT_6_67_THEN_IF_inp_B_BIT_5_75_THEN__ETC___d647[9] ^
	     inp_A[2] ;
  assign x__h26043 =
	     IF_inp_B_BIT_6_67_THEN_IF_inp_B_BIT_5_75_THEN__ETC___d647[8] ^
	     inp_A[1] ;
  assign x__h26117 = x__h26119 | y__h26120 ;
  assign x__h26119 =
	     IF_inp_B_BIT_6_67_THEN_IF_inp_B_BIT_5_75_THEN__ETC___d647[8] &
	     inp_A[1] ;
  assign x__h26132 = x__h26134 | y__h26135 ;
  assign x__h26134 =
	     IF_inp_B_BIT_6_67_THEN_IF_inp_B_BIT_5_75_THEN__ETC___d647[9] &
	     inp_A[2] ;
  assign x__h26147 = x__h26149 | y__h26150 ;
  assign x__h26149 =
	     IF_inp_B_BIT_6_67_THEN_IF_inp_B_BIT_5_75_THEN__ETC___d647[10] &
	     inp_A[3] ;
  assign x__h26162 = x__h26164 | y__h26165 ;
  assign x__h26164 =
	     IF_inp_B_BIT_6_67_THEN_IF_inp_B_BIT_5_75_THEN__ETC___d647[11] &
	     inp_A[4] ;
  assign x__h26438 =
	     IF_inp_B_BIT_6_67_THEN_IF_inp_B_BIT_5_75_THEN__ETC___d647[15] ^
	     inp_A[8] ;
  assign x__h26564 =
	     IF_inp_B_BIT_6_67_THEN_IF_inp_B_BIT_5_75_THEN__ETC___d647[14] ^
	     inp_A[7] ;
  assign x__h26647 =
	     IF_inp_B_BIT_6_67_THEN_IF_inp_B_BIT_5_75_THEN__ETC___d647[13] ^
	     inp_A[6] ;
  assign x__h26730 =
	     IF_inp_B_BIT_6_67_THEN_IF_inp_B_BIT_5_75_THEN__ETC___d647[12] ^
	     inp_A[5] ;
  assign x__h26804 = x__h26806 | y__h26807 ;
  assign x__h26806 =
	     IF_inp_B_BIT_6_67_THEN_IF_inp_B_BIT_5_75_THEN__ETC___d647[12] &
	     inp_A[5] ;
  assign x__h26819 = x__h26821 | y__h26822 ;
  assign x__h26821 =
	     IF_inp_B_BIT_6_67_THEN_IF_inp_B_BIT_5_75_THEN__ETC___d647[13] &
	     inp_A[6] ;
  assign x__h26834 = x__h26836 | y__h26837 ;
  assign x__h26836 =
	     IF_inp_B_BIT_6_67_THEN_IF_inp_B_BIT_5_75_THEN__ETC___d647[14] &
	     inp_A[7] ;
  assign x__h28265 =
	     IF_inp_B_BIT_7_50_THEN_IF_inp_B_BIT_6_67_THEN__ETC___d720[11] ^
	     inp_A[3] ;
  assign x__h28391 =
	     IF_inp_B_BIT_7_50_THEN_IF_inp_B_BIT_6_67_THEN__ETC___d720[10] ^
	     inp_A[2] ;
  assign x__h28474 =
	     IF_inp_B_BIT_7_50_THEN_IF_inp_B_BIT_6_67_THEN__ETC___d720[9] ^
	     inp_A[1] ;
  assign x__h28557 =
	     IF_inp_B_BIT_7_50_THEN_IF_inp_B_BIT_6_67_THEN__ETC___d720[8] ^
	     inp_A[0] ;
  assign x__h28646 = x__h28648 | y__h28649 ;
  assign x__h28648 =
	     IF_inp_B_BIT_7_50_THEN_IF_inp_B_BIT_6_67_THEN__ETC___d720[9] &
	     inp_A[1] ;
  assign x__h28661 = x__h28663 | y__h28664 ;
  assign x__h28663 =
	     IF_inp_B_BIT_7_50_THEN_IF_inp_B_BIT_6_67_THEN__ETC___d720[10] &
	     inp_A[2] ;
  assign x__h28676 = x__h28678 | y__h28679 ;
  assign x__h28678 =
	     IF_inp_B_BIT_7_50_THEN_IF_inp_B_BIT_6_67_THEN__ETC___d720[11] &
	     inp_A[3] ;
  assign x__h28952 =
	     IF_inp_B_BIT_7_50_THEN_IF_inp_B_BIT_6_67_THEN__ETC___d720[15] ^
	     inp_A[7] ;
  assign x__h29078 =
	     IF_inp_B_BIT_7_50_THEN_IF_inp_B_BIT_6_67_THEN__ETC___d720[14] ^
	     inp_A[6] ;
  assign x__h29161 =
	     IF_inp_B_BIT_7_50_THEN_IF_inp_B_BIT_6_67_THEN__ETC___d720[13] ^
	     inp_A[5] ;
  assign x__h29244 =
	     IF_inp_B_BIT_7_50_THEN_IF_inp_B_BIT_6_67_THEN__ETC___d720[12] ^
	     inp_A[4] ;
  assign x__h29318 = x__h29320 | y__h29321 ;
  assign x__h29320 =
	     IF_inp_B_BIT_7_50_THEN_IF_inp_B_BIT_6_67_THEN__ETC___d720[12] &
	     inp_A[4] ;
  assign x__h29333 = x__h29335 | y__h29336 ;
  assign x__h29335 =
	     IF_inp_B_BIT_7_50_THEN_IF_inp_B_BIT_6_67_THEN__ETC___d720[13] &
	     inp_A[5] ;
  assign x__h29348 = x__h29350 | y__h29351 ;
  assign x__h29350 =
	     IF_inp_B_BIT_7_50_THEN_IF_inp_B_BIT_6_67_THEN__ETC___d720[14] &
	     inp_A[6] ;
  assign x__h30779 =
	     IF_inp_B_BIT_8_23_THEN_IF_inp_B_BIT_7_50_THEN__ETC___d784[11] ^
	     inp_A[2] ;
  assign x__h30905 =
	     IF_inp_B_BIT_8_23_THEN_IF_inp_B_BIT_7_50_THEN__ETC___d784[10] ^
	     inp_A[1] ;
  assign x__h30988 =
	     IF_inp_B_BIT_8_23_THEN_IF_inp_B_BIT_7_50_THEN__ETC___d784[9] ^
	     inp_A[0] ;
  assign x__h31175 = x__h31177 | y__h31178 ;
  assign x__h31177 =
	     IF_inp_B_BIT_8_23_THEN_IF_inp_B_BIT_7_50_THEN__ETC___d784[10] &
	     inp_A[1] ;
  assign x__h31190 = x__h31192 | y__h31193 ;
  assign x__h31192 =
	     IF_inp_B_BIT_8_23_THEN_IF_inp_B_BIT_7_50_THEN__ETC___d784[11] &
	     inp_A[2] ;
  assign x__h31466 =
	     IF_inp_B_BIT_8_23_THEN_IF_inp_B_BIT_7_50_THEN__ETC___d784[15] ^
	     inp_A[6] ;
  assign x__h31592 =
	     IF_inp_B_BIT_8_23_THEN_IF_inp_B_BIT_7_50_THEN__ETC___d784[14] ^
	     inp_A[5] ;
  assign x__h31675 =
	     IF_inp_B_BIT_8_23_THEN_IF_inp_B_BIT_7_50_THEN__ETC___d784[13] ^
	     inp_A[4] ;
  assign x__h31758 =
	     IF_inp_B_BIT_8_23_THEN_IF_inp_B_BIT_7_50_THEN__ETC___d784[12] ^
	     inp_A[3] ;
  assign x__h31832 = x__h31834 | y__h31835 ;
  assign x__h31834 =
	     IF_inp_B_BIT_8_23_THEN_IF_inp_B_BIT_7_50_THEN__ETC___d784[12] &
	     inp_A[3] ;
  assign x__h31847 = x__h31849 | y__h31850 ;
  assign x__h31849 =
	     IF_inp_B_BIT_8_23_THEN_IF_inp_B_BIT_7_50_THEN__ETC___d784[13] &
	     inp_A[4] ;
  assign x__h31862 = x__h31864 | y__h31865 ;
  assign x__h31864 =
	     IF_inp_B_BIT_8_23_THEN_IF_inp_B_BIT_7_50_THEN__ETC___d784[14] &
	     inp_A[5] ;
  assign x__h33293 =
	     IF_inp_B_BIT_9_87_THEN_IF_inp_B_BIT_8_23_THEN__ETC___d841[11] ^
	     inp_A[1] ;
  assign x__h33419 =
	     IF_inp_B_BIT_9_87_THEN_IF_inp_B_BIT_8_23_THEN__ETC___d841[10] ^
	     inp_A[0] ;
  assign x__h33704 = x__h33706 | y__h33707 ;
  assign x__h33706 =
	     IF_inp_B_BIT_9_87_THEN_IF_inp_B_BIT_8_23_THEN__ETC___d841[11] &
	     inp_A[1] ;
  assign x__h33980 =
	     IF_inp_B_BIT_9_87_THEN_IF_inp_B_BIT_8_23_THEN__ETC___d841[15] ^
	     inp_A[5] ;
  assign x__h34106 =
	     IF_inp_B_BIT_9_87_THEN_IF_inp_B_BIT_8_23_THEN__ETC___d841[14] ^
	     inp_A[4] ;
  assign x__h34189 =
	     IF_inp_B_BIT_9_87_THEN_IF_inp_B_BIT_8_23_THEN__ETC___d841[13] ^
	     inp_A[3] ;
  assign x__h34272 =
	     IF_inp_B_BIT_9_87_THEN_IF_inp_B_BIT_8_23_THEN__ETC___d841[12] ^
	     inp_A[2] ;
  assign x__h34346 = x__h34348 | y__h34349 ;
  assign x__h34348 =
	     IF_inp_B_BIT_9_87_THEN_IF_inp_B_BIT_8_23_THEN__ETC___d841[12] &
	     inp_A[2] ;
  assign x__h34361 = x__h34363 | y__h34364 ;
  assign x__h34363 =
	     IF_inp_B_BIT_9_87_THEN_IF_inp_B_BIT_8_23_THEN__ETC___d841[13] &
	     inp_A[3] ;
  assign x__h34376 = x__h34378 | y__h34379 ;
  assign x__h34378 =
	     IF_inp_B_BIT_9_87_THEN_IF_inp_B_BIT_8_23_THEN__ETC___d841[14] &
	     inp_A[4] ;
  assign x__h35807 =
	     IF_inp_B_BIT_10_44_THEN_IF_inp_B_BIT_9_87_THEN_ETC___d889[11] ^
	     inp_A[0] ;
  assign x__h36494 =
	     IF_inp_B_BIT_10_44_THEN_IF_inp_B_BIT_9_87_THEN_ETC___d889[15] ^
	     inp_A[4] ;
  assign x__h36620 =
	     IF_inp_B_BIT_10_44_THEN_IF_inp_B_BIT_9_87_THEN_ETC___d889[14] ^
	     inp_A[3] ;
  assign x__h36703 =
	     IF_inp_B_BIT_10_44_THEN_IF_inp_B_BIT_9_87_THEN_ETC___d889[13] ^
	     inp_A[2] ;
  assign x__h36786 =
	     IF_inp_B_BIT_10_44_THEN_IF_inp_B_BIT_9_87_THEN_ETC___d889[12] ^
	     inp_A[1] ;
  assign x__h36860 = x__h36862 | y__h36863 ;
  assign x__h36862 =
	     IF_inp_B_BIT_10_44_THEN_IF_inp_B_BIT_9_87_THEN_ETC___d889[12] &
	     inp_A[1] ;
  assign x__h36875 = x__h36877 | y__h36878 ;
  assign x__h36877 =
	     IF_inp_B_BIT_10_44_THEN_IF_inp_B_BIT_9_87_THEN_ETC___d889[13] &
	     inp_A[2] ;
  assign x__h36890 = x__h36892 | y__h36893 ;
  assign x__h36892 =
	     IF_inp_B_BIT_10_44_THEN_IF_inp_B_BIT_9_87_THEN_ETC___d889[14] &
	     inp_A[3] ;
  assign x__h39008 =
	     IF_inp_B_BIT_11_92_THEN_IF_inp_B_BIT_10_44_THE_ETC___d927[15] ^
	     inp_A[3] ;
  assign x__h39134 =
	     IF_inp_B_BIT_11_92_THEN_IF_inp_B_BIT_10_44_THE_ETC___d927[14] ^
	     inp_A[2] ;
  assign x__h39217 =
	     IF_inp_B_BIT_11_92_THEN_IF_inp_B_BIT_10_44_THE_ETC___d927[13] ^
	     inp_A[1] ;
  assign x__h39300 =
	     IF_inp_B_BIT_11_92_THEN_IF_inp_B_BIT_10_44_THE_ETC___d927[12] ^
	     inp_A[0] ;
  assign x__h39389 = x__h39391 | y__h39392 ;
  assign x__h39391 =
	     IF_inp_B_BIT_11_92_THEN_IF_inp_B_BIT_10_44_THE_ETC___d927[13] &
	     inp_A[1] ;
  assign x__h39404 = x__h39406 | y__h39407 ;
  assign x__h39406 =
	     IF_inp_B_BIT_11_92_THEN_IF_inp_B_BIT_10_44_THE_ETC___d927[14] &
	     inp_A[2] ;
  assign x__h41522 =
	     IF_inp_B_BIT_12_30_THEN_IF_inp_B_BIT_11_92_THE_ETC___d957[15] ^
	     inp_A[2] ;
  assign x__h41648 =
	     IF_inp_B_BIT_12_30_THEN_IF_inp_B_BIT_11_92_THE_ETC___d957[14] ^
	     inp_A[1] ;
  assign x__h41731 =
	     IF_inp_B_BIT_12_30_THEN_IF_inp_B_BIT_11_92_THE_ETC___d957[13] ^
	     inp_A[0] ;
  assign x__h41918 = x__h41920 | y__h41921 ;
  assign x__h41920 =
	     IF_inp_B_BIT_12_30_THEN_IF_inp_B_BIT_11_92_THE_ETC___d957[14] &
	     inp_A[1] ;
  assign x__h44036 =
	     IF_inp_B_BIT_13_60_THEN_IF_inp_B_BIT_12_30_THE_ETC___d980[15] ^
	     inp_A[1] ;
  assign x__h44162 =
	     IF_inp_B_BIT_13_60_THEN_IF_inp_B_BIT_12_30_THE_ETC___d980[14] ^
	     inp_A[0] ;
  assign x__h46550 =
	     IF_inp_B_BIT_14_82_THEN_IF_inp_B_BIT_13_60_THE_ETC___d993[15] ^
	     inp_A[0] ;
  assign x__h5638 =
	     IF_inp_B_BIT_2_52_THEN_IF_inp_B_BIT_1_2_THEN_I_ETC___d265[3] ^
	     inp_A[0] ;
  assign x__h6025 =
	     IF_inp_B_BIT_1_2_THEN_IF_inp_B_BIT_0_THEN_inp__ETC___d149[3] ^
	     inp_A[1] ;
  assign x__h6412 = IF_inp_B_BIT_0_THEN_inp_A_ELSE_0___d9[3] ^ inp_A[2] ;
  assign x__h9440 = IF_inp_B_BIT_0_THEN_inp_A_ELSE_0___d9[2] ^ inp_A[1] ;
  assign x__h9690 = x__h9692 | y__h9693 ;
  assign x__h9692 = IF_inp_B_BIT_0_THEN_inp_A_ELSE_0___d9[2] & inp_A[1] ;
  assign x__h9705 = x__h9707 | y__h9708 ;
  assign x__h9707 = IF_inp_B_BIT_0_THEN_inp_A_ELSE_0___d9[3] & inp_A[2] ;
  assign x__h9979 = IF_inp_B_BIT_0_THEN_inp_A_ELSE_0___d9[7] ^ inp_A[6] ;
  assign y__h10346 = carry__h6100 & IF_inp_B_BIT_0_THEN_inp_A_ELSE_0___d9[4] ;
  assign y__h10348 = inp_A[3] & carry__h6100 ;
  assign y__h10361 = carry__h9846 & IF_inp_B_BIT_0_THEN_inp_A_ELSE_0___d9[5] ;
  assign y__h10363 = inp_A[4] & carry__h9846 ;
  assign y__h10376 = carry__h9849 & IF_inp_B_BIT_0_THEN_inp_A_ELSE_0___d9[6] ;
  assign y__h10378 = inp_A[5] & carry__h9849 ;
  assign y__h10391 = carry__h9852 & IF_inp_B_BIT_0_THEN_inp_A_ELSE_0___d9[7] ;
  assign y__h10393 = inp_A[6] & carry__h9852 ;
  assign y__h11034 = carry__h6102 & IF_inp_B_BIT_0_THEN_inp_A_ELSE_0___d9[8] ;
  assign y__h11036 = inp_A[7] & carry__h6102 ;
  assign y__h11049 =
	     carry__h10534 & IF_inp_B_BIT_0_THEN_inp_A_ELSE_0___d9[9] ;
  assign y__h11051 = inp_A[8] & carry__h10534 ;
  assign y__h11064 =
	     carry__h10537 & IF_inp_B_BIT_0_THEN_inp_A_ELSE_0___d9[10] ;
  assign y__h11066 = inp_A[9] & carry__h10537 ;
  assign y__h11079 =
	     carry__h10540 & IF_inp_B_BIT_0_THEN_inp_A_ELSE_0___d9[11] ;
  assign y__h11081 = inp_A[10] & carry__h10540 ;
  assign y__h11721 =
	     carry__h6104 & IF_inp_B_BIT_0_THEN_inp_A_ELSE_0___d9[12] ;
  assign y__h11723 = inp_A[11] & carry__h6104 ;
  assign y__h11736 =
	     carry__h11221 & IF_inp_B_BIT_0_THEN_inp_A_ELSE_0___d9[13] ;
  assign y__h11738 = inp_A[12] & carry__h11221 ;
  assign y__h11751 =
	     carry__h11224 & IF_inp_B_BIT_0_THEN_inp_A_ELSE_0___d9[14] ;
  assign y__h11753 = inp_A[13] & carry__h11224 ;
  assign y__h12220 =
	     carry__h5898 &
	     IF_inp_B_BIT_1_2_THEN_IF_inp_B_BIT_0_THEN_inp__ETC___d149[3] ;
  assign y__h12222 = inp_A[1] & carry__h5898 ;
  assign y__h12860 =
	     carry__h5713 &
	     IF_inp_B_BIT_1_2_THEN_IF_inp_B_BIT_0_THEN_inp__ETC___d149[4] ;
  assign y__h12862 = inp_A[2] & carry__h5713 ;
  assign y__h12875 =
	     carry__h12360 &
	     IF_inp_B_BIT_1_2_THEN_IF_inp_B_BIT_0_THEN_inp__ETC___d149[5] ;
  assign y__h12877 = inp_A[3] & carry__h12360 ;
  assign y__h12890 =
	     carry__h12363 &
	     IF_inp_B_BIT_1_2_THEN_IF_inp_B_BIT_0_THEN_inp__ETC___d149[6] ;
  assign y__h12892 = inp_A[4] & carry__h12363 ;
  assign y__h12905 =
	     carry__h12366 &
	     IF_inp_B_BIT_1_2_THEN_IF_inp_B_BIT_0_THEN_inp__ETC___d149[7] ;
  assign y__h12907 = inp_A[5] & carry__h12366 ;
  assign y__h13548 =
	     carry__h5715 &
	     IF_inp_B_BIT_1_2_THEN_IF_inp_B_BIT_0_THEN_inp__ETC___d149[8] ;
  assign y__h13550 = inp_A[6] & carry__h5715 ;
  assign y__h13563 =
	     carry__h13048 &
	     IF_inp_B_BIT_1_2_THEN_IF_inp_B_BIT_0_THEN_inp__ETC___d149[9] ;
  assign y__h13565 = inp_A[7] & carry__h13048 ;
  assign y__h13578 =
	     carry__h13051 &
	     IF_inp_B_BIT_1_2_THEN_IF_inp_B_BIT_0_THEN_inp__ETC___d149[10] ;
  assign y__h13580 = inp_A[8] & carry__h13051 ;
  assign y__h13593 =
	     carry__h13054 &
	     IF_inp_B_BIT_1_2_THEN_IF_inp_B_BIT_0_THEN_inp__ETC___d149[11] ;
  assign y__h13595 = inp_A[9] & carry__h13054 ;
  assign y__h14235 =
	     carry__h5717 &
	     IF_inp_B_BIT_1_2_THEN_IF_inp_B_BIT_0_THEN_inp__ETC___d149[12] ;
  assign y__h14237 = inp_A[10] & carry__h5717 ;
  assign y__h14250 =
	     carry__h13735 &
	     IF_inp_B_BIT_1_2_THEN_IF_inp_B_BIT_0_THEN_inp__ETC___d149[13] ;
  assign y__h14252 = inp_A[11] & carry__h13735 ;
  assign y__h14265 =
	     carry__h13738 &
	     IF_inp_B_BIT_1_2_THEN_IF_inp_B_BIT_0_THEN_inp__ETC___d149[14] ;
  assign y__h14267 = inp_A[12] & carry__h13738 ;
  assign y__h15374 =
	     carry__h5326 &
	     IF_inp_B_BIT_2_52_THEN_IF_inp_B_BIT_1_2_THEN_I_ETC___d265[4] ;
  assign y__h15376 = inp_A[1] & carry__h5326 ;
  assign y__h15389 =
	     carry__h14874 &
	     IF_inp_B_BIT_2_52_THEN_IF_inp_B_BIT_1_2_THEN_I_ETC___d265[5] ;
  assign y__h15391 = inp_A[2] & carry__h14874 ;
  assign y__h15404 =
	     carry__h14877 &
	     IF_inp_B_BIT_2_52_THEN_IF_inp_B_BIT_1_2_THEN_I_ETC___d265[6] ;
  assign y__h15406 = inp_A[3] & carry__h14877 ;
  assign y__h15419 =
	     carry__h14880 &
	     IF_inp_B_BIT_2_52_THEN_IF_inp_B_BIT_1_2_THEN_I_ETC___d265[7] ;
  assign y__h15421 = inp_A[4] & carry__h14880 ;
  assign y__h16062 =
	     carry__h5328 &
	     IF_inp_B_BIT_2_52_THEN_IF_inp_B_BIT_1_2_THEN_I_ETC___d265[8] ;
  assign y__h16064 = inp_A[5] & carry__h5328 ;
  assign y__h16077 =
	     carry__h15562 &
	     IF_inp_B_BIT_2_52_THEN_IF_inp_B_BIT_1_2_THEN_I_ETC___d265[9] ;
  assign y__h16079 = inp_A[6] & carry__h15562 ;
  assign y__h16092 =
	     carry__h15565 &
	     IF_inp_B_BIT_2_52_THEN_IF_inp_B_BIT_1_2_THEN_I_ETC___d265[10] ;
  assign y__h16094 = inp_A[7] & carry__h15565 ;
  assign y__h16107 =
	     carry__h15568 &
	     IF_inp_B_BIT_2_52_THEN_IF_inp_B_BIT_1_2_THEN_I_ETC___d265[11] ;
  assign y__h16109 = inp_A[8] & carry__h15568 ;
  assign y__h16749 =
	     carry__h5330 &
	     IF_inp_B_BIT_2_52_THEN_IF_inp_B_BIT_1_2_THEN_I_ETC___d265[12] ;
  assign y__h16751 = inp_A[9] & carry__h5330 ;
  assign y__h16764 =
	     carry__h16249 &
	     IF_inp_B_BIT_2_52_THEN_IF_inp_B_BIT_1_2_THEN_I_ETC___d265[13] ;
  assign y__h16766 = inp_A[10] & carry__h16249 ;
  assign y__h16779 =
	     carry__h16252 &
	     IF_inp_B_BIT_2_52_THEN_IF_inp_B_BIT_1_2_THEN_I_ETC___d265[14] ;
  assign y__h16781 = inp_A[11] & carry__h16252 ;
  assign y__h17903 =
	     carry__h17388 &
	     IF_inp_B_BIT_3_68_THEN_IF_inp_B_BIT_2_52_THEN__ETC___d373[5] ;
  assign y__h17905 = inp_A[1] & carry__h17388 ;
  assign y__h17918 =
	     carry__h17391 &
	     IF_inp_B_BIT_3_68_THEN_IF_inp_B_BIT_2_52_THEN__ETC___d373[6] ;
  assign y__h17920 = inp_A[2] & carry__h17391 ;
  assign y__h17933 =
	     carry__h17394 &
	     IF_inp_B_BIT_3_68_THEN_IF_inp_B_BIT_2_52_THEN__ETC___d373[7] ;
  assign y__h17935 = inp_A[3] & carry__h17394 ;
  assign y__h18576 =
	     carry__h4941 &
	     IF_inp_B_BIT_3_68_THEN_IF_inp_B_BIT_2_52_THEN__ETC___d373[8] ;
  assign y__h18578 = inp_A[4] & carry__h4941 ;
  assign y__h18591 =
	     carry__h18076 &
	     IF_inp_B_BIT_3_68_THEN_IF_inp_B_BIT_2_52_THEN__ETC___d373[9] ;
  assign y__h18593 = inp_A[5] & carry__h18076 ;
  assign y__h18606 =
	     carry__h18079 &
	     IF_inp_B_BIT_3_68_THEN_IF_inp_B_BIT_2_52_THEN__ETC___d373[10] ;
  assign y__h18608 = inp_A[6] & carry__h18079 ;
  assign y__h18621 =
	     carry__h18082 &
	     IF_inp_B_BIT_3_68_THEN_IF_inp_B_BIT_2_52_THEN__ETC___d373[11] ;
  assign y__h18623 = inp_A[7] & carry__h18082 ;
  assign y__h19263 =
	     carry__h4943 &
	     IF_inp_B_BIT_3_68_THEN_IF_inp_B_BIT_2_52_THEN__ETC___d373[12] ;
  assign y__h19265 = inp_A[8] & carry__h4943 ;
  assign y__h19278 =
	     carry__h18763 &
	     IF_inp_B_BIT_3_68_THEN_IF_inp_B_BIT_2_52_THEN__ETC___d373[13] ;
  assign y__h19280 = inp_A[9] & carry__h18763 ;
  assign y__h19293 =
	     carry__h18766 &
	     IF_inp_B_BIT_3_68_THEN_IF_inp_B_BIT_2_52_THEN__ETC___d373[14] ;
  assign y__h19295 = inp_A[10] & carry__h18766 ;
  assign y__h20432 =
	     carry__h19905 &
	     IF_inp_B_BIT_4_76_THEN_IF_inp_B_BIT_3_68_THEN__ETC___d472[6] ;
  assign y__h20434 = inp_A[1] & carry__h19905 ;
  assign y__h20447 =
	     carry__h19908 &
	     IF_inp_B_BIT_4_76_THEN_IF_inp_B_BIT_3_68_THEN__ETC___d472[7] ;
  assign y__h20449 = inp_A[2] & carry__h19908 ;
  assign y__h21090 =
	     carry__h4554 &
	     IF_inp_B_BIT_4_76_THEN_IF_inp_B_BIT_3_68_THEN__ETC___d472[8] ;
  assign y__h21092 = inp_A[3] & carry__h4554 ;
  assign y__h21105 =
	     carry__h20590 &
	     IF_inp_B_BIT_4_76_THEN_IF_inp_B_BIT_3_68_THEN__ETC___d472[9] ;
  assign y__h21107 = inp_A[4] & carry__h20590 ;
  assign y__h21120 =
	     carry__h20593 &
	     IF_inp_B_BIT_4_76_THEN_IF_inp_B_BIT_3_68_THEN__ETC___d472[10] ;
  assign y__h21122 = inp_A[5] & carry__h20593 ;
  assign y__h21135 =
	     carry__h20596 &
	     IF_inp_B_BIT_4_76_THEN_IF_inp_B_BIT_3_68_THEN__ETC___d472[11] ;
  assign y__h21137 = inp_A[6] & carry__h20596 ;
  assign y__h21777 =
	     carry__h4556 &
	     IF_inp_B_BIT_4_76_THEN_IF_inp_B_BIT_3_68_THEN__ETC___d472[12] ;
  assign y__h21779 = inp_A[7] & carry__h4556 ;
  assign y__h21792 =
	     carry__h21277 &
	     IF_inp_B_BIT_4_76_THEN_IF_inp_B_BIT_3_68_THEN__ETC___d472[13] ;
  assign y__h21794 = inp_A[8] & carry__h21277 ;
  assign y__h21807 =
	     carry__h21280 &
	     IF_inp_B_BIT_4_76_THEN_IF_inp_B_BIT_3_68_THEN__ETC___d472[14] ;
  assign y__h21809 = inp_A[9] & carry__h21280 ;
  assign y__h22961 =
	     carry__h22422 &
	     IF_inp_B_BIT_5_75_THEN_IF_inp_B_BIT_4_76_THEN__ETC___d564[7] ;
  assign y__h22963 = inp_A[1] & carry__h22422 ;
  assign y__h23604 =
	     carry__h4167 &
	     IF_inp_B_BIT_5_75_THEN_IF_inp_B_BIT_4_76_THEN__ETC___d564[8] ;
  assign y__h23606 = inp_A[2] & carry__h4167 ;
  assign y__h23619 =
	     carry__h23104 &
	     IF_inp_B_BIT_5_75_THEN_IF_inp_B_BIT_4_76_THEN__ETC___d564[9] ;
  assign y__h23621 = inp_A[3] & carry__h23104 ;
  assign y__h23634 =
	     carry__h23107 &
	     IF_inp_B_BIT_5_75_THEN_IF_inp_B_BIT_4_76_THEN__ETC___d564[10] ;
  assign y__h23636 = inp_A[4] & carry__h23107 ;
  assign y__h23649 =
	     carry__h23110 &
	     IF_inp_B_BIT_5_75_THEN_IF_inp_B_BIT_4_76_THEN__ETC___d564[11] ;
  assign y__h23651 = inp_A[5] & carry__h23110 ;
  assign y__h24291 =
	     carry__h4169 &
	     IF_inp_B_BIT_5_75_THEN_IF_inp_B_BIT_4_76_THEN__ETC___d564[12] ;
  assign y__h24293 = inp_A[6] & carry__h4169 ;
  assign y__h24306 =
	     carry__h23791 &
	     IF_inp_B_BIT_5_75_THEN_IF_inp_B_BIT_4_76_THEN__ETC___d564[13] ;
  assign y__h24308 = inp_A[7] & carry__h23791 ;
  assign y__h24321 =
	     carry__h23794 &
	     IF_inp_B_BIT_5_75_THEN_IF_inp_B_BIT_4_76_THEN__ETC___d564[14] ;
  assign y__h24323 = inp_A[8] & carry__h23794 ;
  assign y__h26118 =
	     carry__h3780 &
	     IF_inp_B_BIT_6_67_THEN_IF_inp_B_BIT_5_75_THEN__ETC___d647[8] ;
  assign y__h26120 = inp_A[1] & carry__h3780 ;
  assign y__h26133 =
	     carry__h25618 &
	     IF_inp_B_BIT_6_67_THEN_IF_inp_B_BIT_5_75_THEN__ETC___d647[9] ;
  assign y__h26135 = inp_A[2] & carry__h25618 ;
  assign y__h26148 =
	     carry__h25621 &
	     IF_inp_B_BIT_6_67_THEN_IF_inp_B_BIT_5_75_THEN__ETC___d647[10] ;
  assign y__h26150 = inp_A[3] & carry__h25621 ;
  assign y__h26163 =
	     carry__h25624 &
	     IF_inp_B_BIT_6_67_THEN_IF_inp_B_BIT_5_75_THEN__ETC___d647[11] ;
  assign y__h26165 = inp_A[4] & carry__h25624 ;
  assign y__h26805 =
	     carry__h3782 &
	     IF_inp_B_BIT_6_67_THEN_IF_inp_B_BIT_5_75_THEN__ETC___d647[12] ;
  assign y__h26807 = inp_A[5] & carry__h3782 ;
  assign y__h26820 =
	     carry__h26305 &
	     IF_inp_B_BIT_6_67_THEN_IF_inp_B_BIT_5_75_THEN__ETC___d647[13] ;
  assign y__h26822 = inp_A[6] & carry__h26305 ;
  assign y__h26835 =
	     carry__h26308 &
	     IF_inp_B_BIT_6_67_THEN_IF_inp_B_BIT_5_75_THEN__ETC___d647[14] ;
  assign y__h26837 = inp_A[7] & carry__h26308 ;
  assign y__h28647 =
	     carry__h28132 &
	     IF_inp_B_BIT_7_50_THEN_IF_inp_B_BIT_6_67_THEN__ETC___d720[9] ;
  assign y__h28649 = inp_A[1] & carry__h28132 ;
  assign y__h28662 =
	     carry__h28135 &
	     IF_inp_B_BIT_7_50_THEN_IF_inp_B_BIT_6_67_THEN__ETC___d720[10] ;
  assign y__h28664 = inp_A[2] & carry__h28135 ;
  assign y__h28677 =
	     carry__h28138 &
	     IF_inp_B_BIT_7_50_THEN_IF_inp_B_BIT_6_67_THEN__ETC___d720[11] ;
  assign y__h28679 = inp_A[3] & carry__h28138 ;
  assign y__h29319 =
	     carry__h3395 &
	     IF_inp_B_BIT_7_50_THEN_IF_inp_B_BIT_6_67_THEN__ETC___d720[12] ;
  assign y__h29321 = inp_A[4] & carry__h3395 ;
  assign y__h29334 =
	     carry__h28819 &
	     IF_inp_B_BIT_7_50_THEN_IF_inp_B_BIT_6_67_THEN__ETC___d720[13] ;
  assign y__h29336 = inp_A[5] & carry__h28819 ;
  assign y__h29349 =
	     carry__h28822 &
	     IF_inp_B_BIT_7_50_THEN_IF_inp_B_BIT_6_67_THEN__ETC___d720[14] ;
  assign y__h29351 = inp_A[6] & carry__h28822 ;
  assign y__h31176 =
	     carry__h30649 &
	     IF_inp_B_BIT_8_23_THEN_IF_inp_B_BIT_7_50_THEN__ETC___d784[10] ;
  assign y__h31178 = inp_A[1] & carry__h30649 ;
  assign y__h31191 =
	     carry__h30652 &
	     IF_inp_B_BIT_8_23_THEN_IF_inp_B_BIT_7_50_THEN__ETC___d784[11] ;
  assign y__h31193 = inp_A[2] & carry__h30652 ;
  assign y__h31833 =
	     carry__h3008 &
	     IF_inp_B_BIT_8_23_THEN_IF_inp_B_BIT_7_50_THEN__ETC___d784[12] ;
  assign y__h31835 = inp_A[3] & carry__h3008 ;
  assign y__h31848 =
	     carry__h31333 &
	     IF_inp_B_BIT_8_23_THEN_IF_inp_B_BIT_7_50_THEN__ETC___d784[13] ;
  assign y__h31850 = inp_A[4] & carry__h31333 ;
  assign y__h31863 =
	     carry__h31336 &
	     IF_inp_B_BIT_8_23_THEN_IF_inp_B_BIT_7_50_THEN__ETC___d784[14] ;
  assign y__h31865 = inp_A[5] & carry__h31336 ;
  assign y__h33705 =
	     carry__h33166 &
	     IF_inp_B_BIT_9_87_THEN_IF_inp_B_BIT_8_23_THEN__ETC___d841[11] ;
  assign y__h33707 = inp_A[1] & carry__h33166 ;
  assign y__h34347 =
	     carry__h2621 &
	     IF_inp_B_BIT_9_87_THEN_IF_inp_B_BIT_8_23_THEN__ETC___d841[12] ;
  assign y__h34349 = inp_A[2] & carry__h2621 ;
  assign y__h34362 =
	     carry__h33847 &
	     IF_inp_B_BIT_9_87_THEN_IF_inp_B_BIT_8_23_THEN__ETC___d841[13] ;
  assign y__h34364 = inp_A[3] & carry__h33847 ;
  assign y__h34377 =
	     carry__h33850 &
	     IF_inp_B_BIT_9_87_THEN_IF_inp_B_BIT_8_23_THEN__ETC___d841[14] ;
  assign y__h34379 = inp_A[4] & carry__h33850 ;
  assign y__h36861 =
	     carry__h2234 &
	     IF_inp_B_BIT_10_44_THEN_IF_inp_B_BIT_9_87_THEN_ETC___d889[12] ;
  assign y__h36863 = inp_A[1] & carry__h2234 ;
  assign y__h36876 =
	     carry__h36361 &
	     IF_inp_B_BIT_10_44_THEN_IF_inp_B_BIT_9_87_THEN_ETC___d889[13] ;
  assign y__h36878 = inp_A[2] & carry__h36361 ;
  assign y__h36891 =
	     carry__h36364 &
	     IF_inp_B_BIT_10_44_THEN_IF_inp_B_BIT_9_87_THEN_ETC___d889[14] ;
  assign y__h36893 = inp_A[3] & carry__h36364 ;
  assign y__h39390 =
	     carry__h38875 &
	     IF_inp_B_BIT_11_92_THEN_IF_inp_B_BIT_10_44_THE_ETC___d927[13] ;
  assign y__h39392 = inp_A[1] & carry__h38875 ;
  assign y__h39405 =
	     carry__h38878 &
	     IF_inp_B_BIT_11_92_THEN_IF_inp_B_BIT_10_44_THE_ETC___d927[14] ;
  assign y__h39407 = inp_A[2] & carry__h38878 ;
  assign y__h41919 =
	     carry__h41392 &
	     IF_inp_B_BIT_12_30_THEN_IF_inp_B_BIT_11_92_THE_ETC___d957[14] ;
  assign y__h41921 = inp_A[1] & carry__h41392 ;
  assign y__h9691 = carry__h6282 & IF_inp_B_BIT_0_THEN_inp_A_ELSE_0___d9[2] ;
  assign y__h9693 = inp_A[1] & carry__h6282 ;
  assign y__h9706 = carry__h6285 & IF_inp_B_BIT_0_THEN_inp_A_ELSE_0___d9[3] ;
  assign y__h9708 = inp_A[2] & carry__h6285 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        inp_A <= `BSV_ASSIGNMENT_DELAY 16'd0;
	inp_B <= `BSV_ASSIGNMENT_DELAY 16'd0;
	inp_C <= `BSV_ASSIGNMENT_DELAY 32'd0;
	result <= `BSV_ASSIGNMENT_DELAY 32'd0;
	state <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (inp_A_EN) inp_A <= `BSV_ASSIGNMENT_DELAY inp_A_D_IN;
	if (inp_B_EN) inp_B <= `BSV_ASSIGNMENT_DELAY inp_B_D_IN;
	if (inp_C_EN) inp_C <= `BSV_ASSIGNMENT_DELAY inp_C_D_IN;
	if (result_EN) result <= `BSV_ASSIGNMENT_DELAY result_D_IN;
	if (state_EN) state <= `BSV_ASSIGNMENT_DELAY state_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    inp_A = 16'hAAAA;
    inp_B = 16'hAAAA;
    inp_C = 32'hAAAAAAAA;
    result = 32'hAAAAAAAA;
    state = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkMult

